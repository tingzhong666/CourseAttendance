/* tslint:disable */
/* eslint-disable */
/**
 * Demo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AttendanceBatchCreateDto
 */
export interface AttendanceBatchCreateDto {
    /**
     * 
     * @type {string}
     * @memberof AttendanceBatchCreateDto
     */
    'passWord'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AttendanceBatchCreateDto
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof AttendanceBatchCreateDto
     */
    'endTime': string;
    /**
     * 
     * @type {number}
     * @memberof AttendanceBatchCreateDto
     */
    'courseId': number;
    /**
     * 
     * @type {CheckMethod}
     * @memberof AttendanceBatchCreateDto
     */
    'checkMethod': CheckMethod;
}


/**
 * 
 * @export
 * @interface AttendanceBatchResDto
 */
export interface AttendanceBatchResDto {
    /**
     * 
     * @type {string}
     * @memberof AttendanceBatchResDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof AttendanceBatchResDto
     */
    'updatedAt': string;
    /**
     * 
     * @type {number}
     * @memberof AttendanceBatchResDto
     */
    'id': number;
    /**
     * 
     * @type {CheckMethod}
     * @memberof AttendanceBatchResDto
     */
    'checkMethod': CheckMethod;
    /**
     * 
     * @type {string}
     * @memberof AttendanceBatchResDto
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof AttendanceBatchResDto
     */
    'endTime': string;
    /**
     * 
     * @type {string}
     * @memberof AttendanceBatchResDto
     */
    'passWord'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AttendanceBatchResDto
     */
    'qrCode'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AttendanceBatchResDto
     */
    'courseId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof AttendanceBatchResDto
     */
    'attendanceIds': Array<number>;
}


/**
 * 
 * @export
 * @interface AttendanceBatchResDtoApiResponse
 */
export interface AttendanceBatchResDtoApiResponse {
    /**
     * 
     * @type {number}
     * @memberof AttendanceBatchResDtoApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof AttendanceBatchResDtoApiResponse
     */
    'msg'?: string | null;
    /**
     * 
     * @type {AttendanceBatchResDto}
     * @memberof AttendanceBatchResDtoApiResponse
     */
    'data'?: AttendanceBatchResDto;
}
/**
 * 
 * @export
 * @interface AttendanceBatchResDtoListDto
 */
export interface AttendanceBatchResDtoListDto {
    /**
     * 
     * @type {Array<AttendanceBatchResDto>}
     * @memberof AttendanceBatchResDtoListDto
     */
    'dataList'?: Array<AttendanceBatchResDto> | null;
    /**
     * 
     * @type {number}
     * @memberof AttendanceBatchResDtoListDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface AttendanceBatchResDtoListDtoApiResponse
 */
export interface AttendanceBatchResDtoListDtoApiResponse {
    /**
     * 
     * @type {number}
     * @memberof AttendanceBatchResDtoListDtoApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof AttendanceBatchResDtoListDtoApiResponse
     */
    'msg'?: string | null;
    /**
     * 
     * @type {AttendanceBatchResDtoListDto}
     * @memberof AttendanceBatchResDtoListDtoApiResponse
     */
    'data'?: AttendanceBatchResDtoListDto;
}
/**
 * 
 * @export
 * @interface AttendanceBatchUpdateDto
 */
export interface AttendanceBatchUpdateDto {
    /**
     * 
     * @type {number}
     * @memberof AttendanceBatchUpdateDto
     */
    'id': number;
    /**
     * 
     * @type {CheckMethod}
     * @memberof AttendanceBatchUpdateDto
     */
    'checkMethod'?: CheckMethod;
    /**
     * 
     * @type {string}
     * @memberof AttendanceBatchUpdateDto
     */
    'startTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AttendanceBatchUpdateDto
     */
    'endTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AttendanceBatchUpdateDto
     */
    'passWord'?: string | null;
}


/**
 * 
 * @export
 * @interface AttendanceQRCodeReqDto
 */
export interface AttendanceQRCodeReqDto {
    /**
     * 
     * @type {string}
     * @memberof AttendanceQRCodeReqDto
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface AttendanceResponseDto
 */
export interface AttendanceResponseDto {
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponseDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponseDto
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof AttendanceResponseDto
     */
    'id': number;
    /**
     * 
     * @type {CheckMethod}
     * @memberof AttendanceResponseDto
     */
    'checkMethod': CheckMethod;
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponseDto
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponseDto
     */
    'endTime': string;
    /**
     * 
     * @type {AttendanceStatus}
     * @memberof AttendanceResponseDto
     */
    'status': AttendanceStatus;
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponseDto
     */
    'signInTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponseDto
     */
    'remark': string;
    /**
     * 
     * @type {number}
     * @memberof AttendanceResponseDto
     */
    'attendanceBatchId': number;
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponseDto
     */
    'studentId': string;
    /**
     * 
     * @type {number}
     * @memberof AttendanceResponseDto
     */
    'courseId': number;
}


/**
 * 
 * @export
 * @interface AttendanceResponseDtoApiResponse
 */
export interface AttendanceResponseDtoApiResponse {
    /**
     * 
     * @type {number}
     * @memberof AttendanceResponseDtoApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponseDtoApiResponse
     */
    'msg'?: string | null;
    /**
     * 
     * @type {AttendanceResponseDto}
     * @memberof AttendanceResponseDtoApiResponse
     */
    'data'?: AttendanceResponseDto;
}
/**
 * 
 * @export
 * @interface AttendanceResponseDtoListDto
 */
export interface AttendanceResponseDtoListDto {
    /**
     * 
     * @type {Array<AttendanceResponseDto>}
     * @memberof AttendanceResponseDtoListDto
     */
    'dataList'?: Array<AttendanceResponseDto> | null;
    /**
     * 
     * @type {number}
     * @memberof AttendanceResponseDtoListDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface AttendanceResponseDtoListDtoApiResponse
 */
export interface AttendanceResponseDtoListDtoApiResponse {
    /**
     * 
     * @type {number}
     * @memberof AttendanceResponseDtoListDtoApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponseDtoListDtoApiResponse
     */
    'msg'?: string | null;
    /**
     * 
     * @type {AttendanceResponseDtoListDto}
     * @memberof AttendanceResponseDtoListDtoApiResponse
     */
    'data'?: AttendanceResponseDtoListDto;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AttendanceStatus = {
    None: 'None',
    Ok: 'Ok',
    OkTearcher: 'OkTearcher',
    Leave: 'Leave',
    Absent: 'Absent'
} as const;

export type AttendanceStatus = typeof AttendanceStatus[keyof typeof AttendanceStatus];


/**
 * 
 * @export
 * @interface AttendanceUpdateRequestDto
 */
export interface AttendanceUpdateRequestDto {
    /**
     * 
     * @type {AttendanceStatus}
     * @memberof AttendanceUpdateRequestDto
     */
    'status': AttendanceStatus;
    /**
     * 
     * @type {string}
     * @memberof AttendanceUpdateRequestDto
     */
    'remark'?: string | null;
}


/**
 * 
 * @export
 * @interface ChangePasswordSelfReqDto
 */
export interface ChangePasswordSelfReqDto {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordSelfReqDto
     */
    'newPassword': string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordSelfReqDto
     */
    'confirmPassword': string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordSelfReqDto
     */
    'currentPassword': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const CheckMethod = {
    Normal: 'Normal',
    Password: 'Password',
    TowCode: 'TowCode'
} as const;

export type CheckMethod = typeof CheckMethod[keyof typeof CheckMethod];


/**
 * 
 * @export
 * @interface CourseRequestDto
 */
export interface CourseRequestDto {
    /**
     * 
     * @type {string}
     * @memberof CourseRequestDto
     */
    'name': string;
    /**
     * 
     * @type {Array<CourseTimeReqDto>}
     * @memberof CourseRequestDto
     */
    'courseTimes': Array<CourseTimeReqDto>;
    /**
     * 
     * @type {string}
     * @memberof CourseRequestDto
     */
    'location': string;
    /**
     * 
     * @type {string}
     * @memberof CourseRequestDto
     */
    'teacherId': string;
    /**
     * 
     * @type {number}
     * @memberof CourseRequestDto
     */
    'majorsSubcategoryId': number;
}
/**
 * 
 * @export
 * @interface CourseResponseDto
 */
export interface CourseResponseDto {
    /**
     * 
     * @type {number}
     * @memberof CourseResponseDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CourseResponseDto
     */
    'name': string;
    /**
     * 
     * @type {Array<CourseTimeResDto>}
     * @memberof CourseResponseDto
     */
    'courseTimes'?: Array<CourseTimeResDto> | null;
    /**
     * 
     * @type {string}
     * @memberof CourseResponseDto
     */
    'location': string;
    /**
     * 
     * @type {string}
     * @memberof CourseResponseDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseResponseDto
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseResponseDto
     */
    'teacherId': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CourseResponseDto
     */
    'studentIds': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof CourseResponseDto
     */
    'majorsSubcategoryId': number;
}
/**
 * 
 * @export
 * @interface CourseResponseDtoApiResponse
 */
export interface CourseResponseDtoApiResponse {
    /**
     * 
     * @type {number}
     * @memberof CourseResponseDtoApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof CourseResponseDtoApiResponse
     */
    'msg'?: string | null;
    /**
     * 
     * @type {CourseResponseDto}
     * @memberof CourseResponseDtoApiResponse
     */
    'data'?: CourseResponseDto;
}
/**
 * 
 * @export
 * @interface CourseResponseListDto
 */
export interface CourseResponseListDto {
    /**
     * 
     * @type {Array<CourseResponseDto>}
     * @memberof CourseResponseListDto
     */
    'dataList'?: Array<CourseResponseDto> | null;
    /**
     * 
     * @type {number}
     * @memberof CourseResponseListDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface CourseResponseListDtoApiResponse
 */
export interface CourseResponseListDtoApiResponse {
    /**
     * 
     * @type {number}
     * @memberof CourseResponseListDtoApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof CourseResponseListDtoApiResponse
     */
    'msg'?: string | null;
    /**
     * 
     * @type {CourseResponseListDto}
     * @memberof CourseResponseListDtoApiResponse
     */
    'data'?: CourseResponseListDto;
}
/**
 * 
 * @export
 * @interface CourseSelectionResDto
 */
export interface CourseSelectionResDto {
    /**
     * 
     * @type {PerformanceLevel}
     * @memberof CourseSelectionResDto
     */
    'performance'?: PerformanceLevel;
    /**
     * 
     * @type {string}
     * @memberof CourseSelectionResDto
     */
    'studentId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CourseSelectionResDto
     */
    'courseId'?: number;
}


/**
 * 
 * @export
 * @interface CourseSelectionResDtoListApiResponse
 */
export interface CourseSelectionResDtoListApiResponse {
    /**
     * 
     * @type {number}
     * @memberof CourseSelectionResDtoListApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof CourseSelectionResDtoListApiResponse
     */
    'msg'?: string | null;
    /**
     * 
     * @type {Array<CourseSelectionResDto>}
     * @memberof CourseSelectionResDtoListApiResponse
     */
    'data'?: Array<CourseSelectionResDto> | null;
}
/**
 * 
 * @export
 * @interface CourseTimeReqDto
 */
export interface CourseTimeReqDto {
    /**
     * 
     * @type {number}
     * @memberof CourseTimeReqDto
     */
    'courseId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CourseTimeReqDto
     */
    'timeTableId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CourseTimeReqDto
     */
    'dateDay'?: string;
}
/**
 * 
 * @export
 * @interface CourseTimeResDto
 */
export interface CourseTimeResDto {
    /**
     * 
     * @type {number}
     * @memberof CourseTimeResDto
     */
    'courseId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CourseTimeResDto
     */
    'timeTableId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CourseTimeResDto
     */
    'dateDay'?: string;
}
/**
 * 
 * @export
 * @interface CreateUserReqDto
 */
export interface CreateUserReqDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserReqDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserReqDto
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserReqDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserReqDto
     */
    'userName': string;
    /**
     * 
     * @type {Array<UserRole>}
     * @memberof CreateUserReqDto
     */
    'roles': Array<UserRole>;
    /**
     * 
     * @type {object}
     * @memberof CreateUserReqDto
     */
    'createAcademicExt'?: object;
    /**
     * 
     * @type {object}
     * @memberof CreateUserReqDto
     */
    'createAdminExt'?: object;
    /**
     * 
     * @type {CreateUserStudentReqDto}
     * @memberof CreateUserReqDto
     */
    'createStudentExt'?: CreateUserStudentReqDto;
    /**
     * 
     * @type {object}
     * @memberof CreateUserReqDto
     */
    'createTeacherExt'?: object;
    /**
     * 
     * @type {string}
     * @memberof CreateUserReqDto
     */
    'passWord': string;
}
/**
 * 
 * @export
 * @interface CreateUserStudentReqDto
 */
export interface CreateUserStudentReqDto {
    /**
     * 
     * @type {number}
     * @memberof CreateUserStudentReqDto
     */
    'gradId': number;
}
/**
 * 
 * @export
 * @interface GetStudentResDto
 */
export interface GetStudentResDto {
    /**
     * 
     * @type {number}
     * @memberof GetStudentResDto
     */
    'gradeId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof GetStudentResDto
     */
    'courses': Array<number>;
}
/**
 * 
 * @export
 * @interface GetTeacherResDto
 */
export interface GetTeacherResDto {
    /**
     * 
     * @type {Array<number>}
     * @memberof GetTeacherResDto
     */
    'courseIds'?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface GetUserResDto
 */
export interface GetUserResDto {
    /**
     * 
     * @type {string}
     * @memberof GetUserResDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetUserResDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GetUserResDto
     */
    'userName': string;
    /**
     * 
     * @type {Array<UserRole>}
     * @memberof GetUserResDto
     */
    'roles': Array<UserRole>;
    /**
     * 
     * @type {string}
     * @memberof GetUserResDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetUserResDto
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof GetUserResDto
     */
    'getAcademicExt'?: object;
    /**
     * 
     * @type {object}
     * @memberof GetUserResDto
     */
    'getAdminExt'?: object;
    /**
     * 
     * @type {GetStudentResDto}
     * @memberof GetUserResDto
     */
    'getStudentExt'?: GetStudentResDto;
    /**
     * 
     * @type {GetTeacherResDto}
     * @memberof GetUserResDto
     */
    'getTeacherExt'?: GetTeacherResDto;
}
/**
 * 
 * @export
 * @interface GetUserResDtoApiResponse
 */
export interface GetUserResDtoApiResponse {
    /**
     * 
     * @type {number}
     * @memberof GetUserResDtoApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetUserResDtoApiResponse
     */
    'msg'?: string | null;
    /**
     * 
     * @type {GetUserResDto}
     * @memberof GetUserResDtoApiResponse
     */
    'data'?: GetUserResDto;
}
/**
 * 
 * @export
 * @interface GetUserResDtoListApiResponse
 */
export interface GetUserResDtoListApiResponse {
    /**
     * 
     * @type {number}
     * @memberof GetUserResDtoListApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetUserResDtoListApiResponse
     */
    'msg'?: string | null;
    /**
     * 
     * @type {Array<GetUserResDto>}
     * @memberof GetUserResDtoListApiResponse
     */
    'data'?: Array<GetUserResDto> | null;
}
/**
 * 
 * @export
 * @interface GetUserResDtoListDto
 */
export interface GetUserResDtoListDto {
    /**
     * 
     * @type {Array<GetUserResDto>}
     * @memberof GetUserResDtoListDto
     */
    'dataList'?: Array<GetUserResDto> | null;
    /**
     * 
     * @type {number}
     * @memberof GetUserResDtoListDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface GetUserResDtoListDtoApiResponse
 */
export interface GetUserResDtoListDtoApiResponse {
    /**
     * 
     * @type {number}
     * @memberof GetUserResDtoListDtoApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetUserResDtoListDtoApiResponse
     */
    'msg'?: string | null;
    /**
     * 
     * @type {GetUserResDtoListDto}
     * @memberof GetUserResDtoListDtoApiResponse
     */
    'data'?: GetUserResDtoListDto;
}
/**
 * 
 * @export
 * @interface GradeRequestDto
 */
export interface GradeRequestDto {
    /**
     * 
     * @type {string}
     * @memberof GradeRequestDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GradeRequestDto
     */
    'majorsCategoriesId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GradeRequestDto
     */
    'majorsSubcategoriesId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GradeRequestDto
     */
    'num'?: number;
    /**
     * 
     * @type {number}
     * @memberof GradeRequestDto
     */
    'year'?: number;
}
/**
 * 
 * @export
 * @interface GradeResponseDto
 */
export interface GradeResponseDto {
    /**
     * 
     * @type {number}
     * @memberof GradeResponseDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GradeResponseDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GradeResponseDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GradeResponseDto
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof GradeResponseDto
     */
    'majorsSubcategoriesId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GradeResponseDto
     */
    'num'?: number;
    /**
     * 
     * @type {number}
     * @memberof GradeResponseDto
     */
    'year'?: number;
}
/**
 * 
 * @export
 * @interface GradeResponseDtoApiResponse
 */
export interface GradeResponseDtoApiResponse {
    /**
     * 
     * @type {number}
     * @memberof GradeResponseDtoApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GradeResponseDtoApiResponse
     */
    'msg'?: string | null;
    /**
     * 
     * @type {GradeResponseDto}
     * @memberof GradeResponseDtoApiResponse
     */
    'data'?: GradeResponseDto;
}
/**
 * 
 * @export
 * @interface GradeResponseDtoListDto
 */
export interface GradeResponseDtoListDto {
    /**
     * 
     * @type {Array<GradeResponseDto>}
     * @memberof GradeResponseDtoListDto
     */
    'dataList'?: Array<GradeResponseDto> | null;
    /**
     * 
     * @type {number}
     * @memberof GradeResponseDtoListDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface GradeResponseDtoListDtoApiResponse
 */
export interface GradeResponseDtoListDtoApiResponse {
    /**
     * 
     * @type {number}
     * @memberof GradeResponseDtoListDtoApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GradeResponseDtoListDtoApiResponse
     */
    'msg'?: string | null;
    /**
     * 
     * @type {GradeResponseDtoListDto}
     * @memberof GradeResponseDtoListDtoApiResponse
     */
    'data'?: GradeResponseDtoListDto;
}
/**
 * 
 * @export
 * @interface LoginModel
 */
export interface LoginModel {
    /**
     * 
     * @type {string}
     * @memberof LoginModel
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof LoginModel
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginRes
 */
export interface LoginRes {
    /**
     * 
     * @type {string}
     * @memberof LoginRes
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRes
     */
    'userName': string;
}
/**
 * 
 * @export
 * @interface LoginResApiResponse
 */
export interface LoginResApiResponse {
    /**
     * 
     * @type {number}
     * @memberof LoginResApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof LoginResApiResponse
     */
    'msg'?: string | null;
    /**
     * 
     * @type {LoginRes}
     * @memberof LoginResApiResponse
     */
    'data'?: LoginRes;
}
/**
 * 
 * @export
 * @interface MajorsCategoryReqDto
 */
export interface MajorsCategoryReqDto {
    /**
     * 
     * @type {string}
     * @memberof MajorsCategoryReqDto
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface MajorsCategoryResDto
 */
export interface MajorsCategoryResDto {
    /**
     * 
     * @type {number}
     * @memberof MajorsCategoryResDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MajorsCategoryResDto
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface MajorsCategoryResDtoApiResponse
 */
export interface MajorsCategoryResDtoApiResponse {
    /**
     * 
     * @type {number}
     * @memberof MajorsCategoryResDtoApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof MajorsCategoryResDtoApiResponse
     */
    'msg'?: string | null;
    /**
     * 
     * @type {MajorsCategoryResDto}
     * @memberof MajorsCategoryResDtoApiResponse
     */
    'data'?: MajorsCategoryResDto;
}
/**
 * 
 * @export
 * @interface MajorsCategoryResDtoListDto
 */
export interface MajorsCategoryResDtoListDto {
    /**
     * 
     * @type {Array<MajorsCategoryResDto>}
     * @memberof MajorsCategoryResDtoListDto
     */
    'dataList'?: Array<MajorsCategoryResDto> | null;
    /**
     * 
     * @type {number}
     * @memberof MajorsCategoryResDtoListDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface MajorsCategoryResDtoListDtoApiResponse
 */
export interface MajorsCategoryResDtoListDtoApiResponse {
    /**
     * 
     * @type {number}
     * @memberof MajorsCategoryResDtoListDtoApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof MajorsCategoryResDtoListDtoApiResponse
     */
    'msg'?: string | null;
    /**
     * 
     * @type {MajorsCategoryResDtoListDto}
     * @memberof MajorsCategoryResDtoListDtoApiResponse
     */
    'data'?: MajorsCategoryResDtoListDto;
}
/**
 * 
 * @export
 * @interface MajorsSubcategoryReqDto
 */
export interface MajorsSubcategoryReqDto {
    /**
     * 
     * @type {string}
     * @memberof MajorsSubcategoryReqDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MajorsSubcategoryReqDto
     */
    'majorsCategoryId'?: number;
}
/**
 * 
 * @export
 * @interface MajorsSubcategoryResDto
 */
export interface MajorsSubcategoryResDto {
    /**
     * 
     * @type {number}
     * @memberof MajorsSubcategoryResDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MajorsSubcategoryResDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MajorsSubcategoryResDto
     */
    'majorsCategoriesId'?: number;
}
/**
 * 
 * @export
 * @interface MajorsSubcategoryResDtoApiResponse
 */
export interface MajorsSubcategoryResDtoApiResponse {
    /**
     * 
     * @type {number}
     * @memberof MajorsSubcategoryResDtoApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof MajorsSubcategoryResDtoApiResponse
     */
    'msg'?: string | null;
    /**
     * 
     * @type {MajorsSubcategoryResDto}
     * @memberof MajorsSubcategoryResDtoApiResponse
     */
    'data'?: MajorsSubcategoryResDto;
}
/**
 * 
 * @export
 * @interface MajorsSubcategoryResDtoListDto
 */
export interface MajorsSubcategoryResDtoListDto {
    /**
     * 
     * @type {Array<MajorsSubcategoryResDto>}
     * @memberof MajorsSubcategoryResDtoListDto
     */
    'dataList'?: Array<MajorsSubcategoryResDto> | null;
    /**
     * 
     * @type {number}
     * @memberof MajorsSubcategoryResDtoListDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface MajorsSubcategoryResDtoListDtoApiResponse
 */
export interface MajorsSubcategoryResDtoListDtoApiResponse {
    /**
     * 
     * @type {number}
     * @memberof MajorsSubcategoryResDtoListDtoApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof MajorsSubcategoryResDtoListDtoApiResponse
     */
    'msg'?: string | null;
    /**
     * 
     * @type {MajorsSubcategoryResDtoListDto}
     * @memberof MajorsSubcategoryResDtoListDtoApiResponse
     */
    'data'?: MajorsSubcategoryResDtoListDto;
}
/**
 * 
 * @export
 * @interface ObjectApiResponse
 */
export interface ObjectApiResponse {
    /**
     * 
     * @type {number}
     * @memberof ObjectApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ObjectApiResponse
     */
    'msg'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof ObjectApiResponse
     */
    'data'?: any | null;
}
/**
 * 
 * @export
 * @interface PasswordAttendanceRequest
 */
export interface PasswordAttendanceRequest {
    /**
     * 
     * @type {string}
     * @memberof PasswordAttendanceRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const PerformanceLevel = {
    None: 'None',
    Excellent: 'Excellent',
    Good: 'Good',
    Medium: 'Medium',
    Poor: 'Poor'
} as const;

export type PerformanceLevel = typeof PerformanceLevel[keyof typeof PerformanceLevel];


/**
 * 
 * @export
 * @interface ResetPasswordReqDto
 */
export interface ResetPasswordReqDto {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordReqDto
     */
    'newPassword': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordReqDto
     */
    'confirmPassword': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordReqDto
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface TimeSpan
 */
export interface TimeSpan {
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'ticks'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'days'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'hours'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'milliseconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'microseconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'nanoseconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'minutes'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'seconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'totalDays'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'totalHours'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'totalMilliseconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'totalMicroseconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'totalNanoseconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'totalMinutes'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'totalSeconds'?: number;
}
/**
 * 
 * @export
 * @interface TimeTableResDto
 */
export interface TimeTableResDto {
    /**
     * 
     * @type {number}
     * @memberof TimeTableResDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TimeTableResDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {TimeSpan}
     * @memberof TimeTableResDto
     */
    'start'?: TimeSpan;
    /**
     * 
     * @type {TimeSpan}
     * @memberof TimeTableResDto
     */
    'end'?: TimeSpan;
}
/**
 * 
 * @export
 * @interface TimeTableResDtoApiResponse
 */
export interface TimeTableResDtoApiResponse {
    /**
     * 
     * @type {number}
     * @memberof TimeTableResDtoApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof TimeTableResDtoApiResponse
     */
    'msg'?: string | null;
    /**
     * 
     * @type {TimeTableResDto}
     * @memberof TimeTableResDtoApiResponse
     */
    'data'?: TimeTableResDto;
}
/**
 * 
 * @export
 * @interface TimeTableResDtoListApiResponse
 */
export interface TimeTableResDtoListApiResponse {
    /**
     * 
     * @type {number}
     * @memberof TimeTableResDtoListApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof TimeTableResDtoListApiResponse
     */
    'msg'?: string | null;
    /**
     * 
     * @type {Array<TimeTableResDto>}
     * @memberof TimeTableResDtoListApiResponse
     */
    'data'?: Array<TimeTableResDto> | null;
}
/**
 * 
 * @export
 * @interface UpdateProfileReqDto
 */
export interface UpdateProfileReqDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileReqDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileReqDto
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileReqDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileReqDto
     */
    'userName': string;
    /**
     * 
     * @type {Array<UserRole>}
     * @memberof UpdateProfileReqDto
     */
    'roles': Array<UserRole>;
    /**
     * 
     * @type {object}
     * @memberof UpdateProfileReqDto
     */
    'createAcademicExt'?: object;
    /**
     * 
     * @type {object}
     * @memberof UpdateProfileReqDto
     */
    'createAdminExt'?: object;
    /**
     * 
     * @type {CreateUserStudentReqDto}
     * @memberof UpdateProfileReqDto
     */
    'createStudentExt'?: CreateUserStudentReqDto;
    /**
     * 
     * @type {object}
     * @memberof UpdateProfileReqDto
     */
    'createTeacherExt'?: object;
}
/**
 * 
 * @export
 * @interface UpdateProfileSelfReqDto
 */
export interface UpdateProfileSelfReqDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileSelfReqDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileSelfReqDto
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileSelfReqDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileSelfReqDto
     */
    'userName': string;
    /**
     * 
     * @type {object}
     * @memberof UpdateProfileSelfReqDto
     */
    'createAcademicExt'?: object;
    /**
     * 
     * @type {object}
     * @memberof UpdateProfileSelfReqDto
     */
    'createAdminExt'?: object;
    /**
     * 
     * @type {CreateUserStudentReqDto}
     * @memberof UpdateProfileSelfReqDto
     */
    'createStudentExt'?: CreateUserStudentReqDto;
    /**
     * 
     * @type {object}
     * @memberof UpdateProfileSelfReqDto
     */
    'createTeacherExt'?: object;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const UserRole = {
    Admin: 'Admin',
    Academic: 'Academic',
    Teacher: 'Teacher',
    Student: 'Student'
} as const;

export type UserRole = typeof UserRole[keyof typeof UserRole];



/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ResetPasswordReqDto} [resetPasswordReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountChangePasswordPut: async (resetPasswordReqDto?: ResetPasswordReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ChangePasswordSelfReqDto} [changePasswordSelfReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountChangePasswordSelfPut: async (changePasswordSelfReqDto?: ChangePasswordSelfReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/change-password-self`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordSelfReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountCheckGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<UserRole>} [roles] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [q] 
         * @param {number} [sortCreateTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGet: async (roles?: Array<UserRole>, page?: number, limit?: number, q?: string, sortCreateTime?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (roles) {
                localVarQueryParameter['Roles'] = roles;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['Limit'] = limit;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (sortCreateTime !== undefined) {
                localVarQueryParameter['SortCreateTime'] = sortCreateTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountIdDelete', 'id', id)
            const localVarPath = `/api/account/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountIdGet', 'id', id)
            const localVarPath = `/api/account/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginModel} [loginModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountLoginPost: async (loginModel?: LoginModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUserReqDto} [createUserReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountPost: async (createUserReqDto?: CreateUserReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountProfileSelfGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/profile-self`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountTestGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {UpdateProfileReqDto} [updateProfileReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountUpdateUserPut: async (id?: string, updateProfileReqDto?: UpdateProfileReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/update-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateProfileSelfReqDto} [updateProfileSelfReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountUpdateUserSelfPut: async (updateProfileSelfReqDto?: UpdateProfileSelfReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/update-user-self`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileSelfReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ResetPasswordReqDto} [resetPasswordReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountChangePasswordPut(resetPasswordReqDto?: ResetPasswordReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountChangePasswordPut(resetPasswordReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountChangePasswordPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ChangePasswordSelfReqDto} [changePasswordSelfReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountChangePasswordSelfPut(changePasswordSelfReqDto?: ChangePasswordSelfReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountChangePasswordSelfPut(changePasswordSelfReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountChangePasswordSelfPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountCheckGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountCheckGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountCheckGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<UserRole>} [roles] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [q] 
         * @param {number} [sortCreateTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountGet(roles?: Array<UserRole>, page?: number, limit?: number, q?: string, sortCreateTime?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResDtoListDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountGet(roles, page, limit, q, sortCreateTime, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginModel} [loginModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountLoginPost(loginModel?: LoginModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountLoginPost(loginModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateUserReqDto} [createUserReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountPost(createUserReqDto?: CreateUserReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountPost(createUserReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountProfileSelfGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountProfileSelfGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountProfileSelfGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountTestGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountTestGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountTestGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {UpdateProfileReqDto} [updateProfileReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountUpdateUserPut(id?: string, updateProfileReqDto?: UpdateProfileReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountUpdateUserPut(id, updateProfileReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountUpdateUserPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateProfileSelfReqDto} [updateProfileSelfReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountUpdateUserSelfPut(updateProfileSelfReqDto?: UpdateProfileSelfReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountUpdateUserSelfPut(updateProfileSelfReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountUpdateUserSelfPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * 
         * @param {ResetPasswordReqDto} [resetPasswordReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountChangePasswordPut(resetPasswordReqDto?: ResetPasswordReqDto, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiAccountChangePasswordPut(resetPasswordReqDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ChangePasswordSelfReqDto} [changePasswordSelfReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountChangePasswordSelfPut(changePasswordSelfReqDto?: ChangePasswordSelfReqDto, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiAccountChangePasswordSelfPut(changePasswordSelfReqDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountCheckGet(options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiAccountCheckGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<UserRole>} [roles] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [q] 
         * @param {number} [sortCreateTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGet(roles?: Array<UserRole>, page?: number, limit?: number, q?: string, sortCreateTime?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetUserResDtoListDtoApiResponse> {
            return localVarFp.apiAccountGet(roles, page, limit, q, sortCreateTime, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiAccountIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GetUserResDtoApiResponse> {
            return localVarFp.apiAccountIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginModel} [loginModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountLoginPost(loginModel?: LoginModel, options?: RawAxiosRequestConfig): AxiosPromise<LoginResApiResponse> {
            return localVarFp.apiAccountLoginPost(loginModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateUserReqDto} [createUserReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountPost(createUserReqDto?: CreateUserReqDto, options?: RawAxiosRequestConfig): AxiosPromise<GetUserResDtoApiResponse> {
            return localVarFp.apiAccountPost(createUserReqDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountProfileSelfGet(options?: RawAxiosRequestConfig): AxiosPromise<GetUserResDtoApiResponse> {
            return localVarFp.apiAccountProfileSelfGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountTestGet(options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiAccountTestGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {UpdateProfileReqDto} [updateProfileReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountUpdateUserPut(id?: string, updateProfileReqDto?: UpdateProfileReqDto, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiAccountUpdateUserPut(id, updateProfileReqDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateProfileSelfReqDto} [updateProfileSelfReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountUpdateUserSelfPut(updateProfileSelfReqDto?: UpdateProfileSelfReqDto, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiAccountUpdateUserSelfPut(updateProfileSelfReqDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 
     * @param {ResetPasswordReqDto} [resetPasswordReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountChangePasswordPut(resetPasswordReqDto?: ResetPasswordReqDto, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountChangePasswordPut(resetPasswordReqDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ChangePasswordSelfReqDto} [changePasswordSelfReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountChangePasswordSelfPut(changePasswordSelfReqDto?: ChangePasswordSelfReqDto, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountChangePasswordSelfPut(changePasswordSelfReqDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountCheckGet(options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountCheckGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<UserRole>} [roles] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [q] 
     * @param {number} [sortCreateTime] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountGet(roles?: Array<UserRole>, page?: number, limit?: number, q?: string, sortCreateTime?: number, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountGet(roles, page, limit, q, sortCreateTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountIdGet(id: string, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginModel} [loginModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountLoginPost(loginModel?: LoginModel, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountLoginPost(loginModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateUserReqDto} [createUserReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountPost(createUserReqDto?: CreateUserReqDto, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountPost(createUserReqDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountProfileSelfGet(options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountProfileSelfGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountTestGet(options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountTestGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {UpdateProfileReqDto} [updateProfileReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountUpdateUserPut(id?: string, updateProfileReqDto?: UpdateProfileReqDto, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountUpdateUserPut(id, updateProfileReqDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateProfileSelfReqDto} [updateProfileSelfReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountUpdateUserSelfPut(updateProfileSelfReqDto?: UpdateProfileSelfReqDto, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountUpdateUserSelfPut(updateProfileSelfReqDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AttendanceApi - axios parameter creator
 * @export
 */
export const AttendanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array<string>} [studentId] 
         * @param {string} [studentName] 
         * @param {Array<string>} [teacherId] 
         * @param {string} [teacherName] 
         * @param {string} [startTime] 
         * @param {string} [endTime] 
         * @param {number} [majorsCategoryId] 
         * @param {number} [majorsSubcategoriesId] 
         * @param {AttendanceStatus} [attendanceStatus] 
         * @param {number} [batchId] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [q] 
         * @param {number} [sortCreateTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceGet: async (studentId?: Array<string>, studentName?: string, teacherId?: Array<string>, teacherName?: string, startTime?: string, endTime?: string, majorsCategoryId?: number, majorsSubcategoriesId?: number, attendanceStatus?: AttendanceStatus, batchId?: number, page?: number, limit?: number, q?: string, sortCreateTime?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/attendance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId) {
                localVarQueryParameter['StudentId'] = studentId;
            }

            if (studentName !== undefined) {
                localVarQueryParameter['StudentName'] = studentName;
            }

            if (teacherId) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (teacherName !== undefined) {
                localVarQueryParameter['TeacherName'] = teacherName;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['StartTime'] = (startTime as any instanceof Date) ?
                    (startTime as any).toISOString() :
                    startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['EndTime'] = (endTime as any instanceof Date) ?
                    (endTime as any).toISOString() :
                    endTime;
            }

            if (majorsCategoryId !== undefined) {
                localVarQueryParameter['MajorsCategoryId'] = majorsCategoryId;
            }

            if (majorsSubcategoriesId !== undefined) {
                localVarQueryParameter['MajorsSubcategoriesId'] = majorsSubcategoriesId;
            }

            if (attendanceStatus !== undefined) {
                localVarQueryParameter['AttendanceStatus'] = attendanceStatus;
            }

            if (batchId !== undefined) {
                localVarQueryParameter['BatchId'] = batchId;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['Limit'] = limit;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (sortCreateTime !== undefined) {
                localVarQueryParameter['SortCreateTime'] = sortCreateTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAttendanceIdDelete', 'id', id)
            const localVarPath = `/api/attendance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAttendanceIdGet', 'id', id)
            const localVarPath = `/api/attendance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {AttendanceUpdateRequestDto} [attendanceUpdateRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendancePut: async (id?: number, attendanceUpdateRequestDto?: AttendanceUpdateRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/attendance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attendanceUpdateRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkingInPost: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/checking-in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {PasswordAttendanceRequest} [passwordAttendanceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkingInPwPost: async (id?: number, passwordAttendanceRequest?: PasswordAttendanceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/checking-in-pw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordAttendanceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {AttendanceQRCodeReqDto} [attendanceQRCodeReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkingInQrPost: async (id?: number, attendanceQRCodeReqDto?: AttendanceQRCodeReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/checking-in-qr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attendanceQRCodeReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttendanceApi - functional programming interface
 * @export
 */
export const AttendanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttendanceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Array<string>} [studentId] 
         * @param {string} [studentName] 
         * @param {Array<string>} [teacherId] 
         * @param {string} [teacherName] 
         * @param {string} [startTime] 
         * @param {string} [endTime] 
         * @param {number} [majorsCategoryId] 
         * @param {number} [majorsSubcategoriesId] 
         * @param {AttendanceStatus} [attendanceStatus] 
         * @param {number} [batchId] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [q] 
         * @param {number} [sortCreateTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttendanceGet(studentId?: Array<string>, studentName?: string, teacherId?: Array<string>, teacherName?: string, startTime?: string, endTime?: string, majorsCategoryId?: number, majorsSubcategoriesId?: number, attendanceStatus?: AttendanceStatus, batchId?: number, page?: number, limit?: number, q?: string, sortCreateTime?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttendanceResponseDtoListDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttendanceGet(studentId, studentName, teacherId, teacherName, startTime, endTime, majorsCategoryId, majorsSubcategoriesId, attendanceStatus, batchId, page, limit, q, sortCreateTime, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendanceApi.apiAttendanceGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttendanceIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttendanceIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendanceApi.apiAttendanceIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttendanceIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttendanceResponseDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttendanceIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendanceApi.apiAttendanceIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {AttendanceUpdateRequestDto} [attendanceUpdateRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttendancePut(id?: number, attendanceUpdateRequestDto?: AttendanceUpdateRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttendancePut(id, attendanceUpdateRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendanceApi.apiAttendancePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkingInPost(id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkingInPost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendanceApi.checkingInPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {PasswordAttendanceRequest} [passwordAttendanceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkingInPwPost(id?: number, passwordAttendanceRequest?: PasswordAttendanceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkingInPwPost(id, passwordAttendanceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendanceApi.checkingInPwPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {AttendanceQRCodeReqDto} [attendanceQRCodeReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkingInQrPost(id?: number, attendanceQRCodeReqDto?: AttendanceQRCodeReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkingInQrPost(id, attendanceQRCodeReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendanceApi.checkingInQrPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AttendanceApi - factory interface
 * @export
 */
export const AttendanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttendanceApiFp(configuration)
    return {
        /**
         * 
         * @param {Array<string>} [studentId] 
         * @param {string} [studentName] 
         * @param {Array<string>} [teacherId] 
         * @param {string} [teacherName] 
         * @param {string} [startTime] 
         * @param {string} [endTime] 
         * @param {number} [majorsCategoryId] 
         * @param {number} [majorsSubcategoriesId] 
         * @param {AttendanceStatus} [attendanceStatus] 
         * @param {number} [batchId] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [q] 
         * @param {number} [sortCreateTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceGet(studentId?: Array<string>, studentName?: string, teacherId?: Array<string>, teacherName?: string, startTime?: string, endTime?: string, majorsCategoryId?: number, majorsSubcategoriesId?: number, attendanceStatus?: AttendanceStatus, batchId?: number, page?: number, limit?: number, q?: string, sortCreateTime?: number, options?: RawAxiosRequestConfig): AxiosPromise<AttendanceResponseDtoListDtoApiResponse> {
            return localVarFp.apiAttendanceGet(studentId, studentName, teacherId, teacherName, startTime, endTime, majorsCategoryId, majorsSubcategoriesId, attendanceStatus, batchId, page, limit, q, sortCreateTime, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiAttendanceIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AttendanceResponseDtoApiResponse> {
            return localVarFp.apiAttendanceIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {AttendanceUpdateRequestDto} [attendanceUpdateRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendancePut(id?: number, attendanceUpdateRequestDto?: AttendanceUpdateRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiAttendancePut(id, attendanceUpdateRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkingInPost(id?: number, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.checkingInPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {PasswordAttendanceRequest} [passwordAttendanceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkingInPwPost(id?: number, passwordAttendanceRequest?: PasswordAttendanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.checkingInPwPost(id, passwordAttendanceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {AttendanceQRCodeReqDto} [attendanceQRCodeReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkingInQrPost(id?: number, attendanceQRCodeReqDto?: AttendanceQRCodeReqDto, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.checkingInQrPost(id, attendanceQRCodeReqDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttendanceApi - object-oriented interface
 * @export
 * @class AttendanceApi
 * @extends {BaseAPI}
 */
export class AttendanceApi extends BaseAPI {
    /**
     * 
     * @param {Array<string>} [studentId] 
     * @param {string} [studentName] 
     * @param {Array<string>} [teacherId] 
     * @param {string} [teacherName] 
     * @param {string} [startTime] 
     * @param {string} [endTime] 
     * @param {number} [majorsCategoryId] 
     * @param {number} [majorsSubcategoriesId] 
     * @param {AttendanceStatus} [attendanceStatus] 
     * @param {number} [batchId] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [q] 
     * @param {number} [sortCreateTime] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceApi
     */
    public apiAttendanceGet(studentId?: Array<string>, studentName?: string, teacherId?: Array<string>, teacherName?: string, startTime?: string, endTime?: string, majorsCategoryId?: number, majorsSubcategoriesId?: number, attendanceStatus?: AttendanceStatus, batchId?: number, page?: number, limit?: number, q?: string, sortCreateTime?: number, options?: RawAxiosRequestConfig) {
        return AttendanceApiFp(this.configuration).apiAttendanceGet(studentId, studentName, teacherId, teacherName, startTime, endTime, majorsCategoryId, majorsSubcategoriesId, attendanceStatus, batchId, page, limit, q, sortCreateTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceApi
     */
    public apiAttendanceIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return AttendanceApiFp(this.configuration).apiAttendanceIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceApi
     */
    public apiAttendanceIdGet(id: number, options?: RawAxiosRequestConfig) {
        return AttendanceApiFp(this.configuration).apiAttendanceIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {AttendanceUpdateRequestDto} [attendanceUpdateRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceApi
     */
    public apiAttendancePut(id?: number, attendanceUpdateRequestDto?: AttendanceUpdateRequestDto, options?: RawAxiosRequestConfig) {
        return AttendanceApiFp(this.configuration).apiAttendancePut(id, attendanceUpdateRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceApi
     */
    public checkingInPost(id?: number, options?: RawAxiosRequestConfig) {
        return AttendanceApiFp(this.configuration).checkingInPost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {PasswordAttendanceRequest} [passwordAttendanceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceApi
     */
    public checkingInPwPost(id?: number, passwordAttendanceRequest?: PasswordAttendanceRequest, options?: RawAxiosRequestConfig) {
        return AttendanceApiFp(this.configuration).checkingInPwPost(id, passwordAttendanceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {AttendanceQRCodeReqDto} [attendanceQRCodeReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceApi
     */
    public checkingInQrPost(id?: number, attendanceQRCodeReqDto?: AttendanceQRCodeReqDto, options?: RawAxiosRequestConfig) {
        return AttendanceApiFp(this.configuration).checkingInQrPost(id, attendanceQRCodeReqDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AttendanceBatchApi - axios parameter creator
 * @export
 */
export const AttendanceBatchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array<string>} [teacherId] 
         * @param {string} [teacherName] 
         * @param {string} [startTime] 
         * @param {string} [endTime] 
         * @param {number} [majorsCategoryId] 
         * @param {number} [majorsSubcategoriesId] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [q] 
         * @param {number} [sortCreateTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceBatchGet: async (teacherId?: Array<string>, teacherName?: string, startTime?: string, endTime?: string, majorsCategoryId?: number, majorsSubcategoriesId?: number, page?: number, limit?: number, q?: string, sortCreateTime?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/attendance-batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }

            if (teacherName !== undefined) {
                localVarQueryParameter['TeacherName'] = teacherName;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['StartTime'] = (startTime as any instanceof Date) ?
                    (startTime as any).toISOString() :
                    startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['EndTime'] = (endTime as any instanceof Date) ?
                    (endTime as any).toISOString() :
                    endTime;
            }

            if (majorsCategoryId !== undefined) {
                localVarQueryParameter['MajorsCategoryId'] = majorsCategoryId;
            }

            if (majorsSubcategoriesId !== undefined) {
                localVarQueryParameter['MajorsSubcategoriesId'] = majorsSubcategoriesId;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['Limit'] = limit;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (sortCreateTime !== undefined) {
                localVarQueryParameter['SortCreateTime'] = sortCreateTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceBatchIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAttendanceBatchIdDelete', 'id', id)
            const localVarPath = `/api/attendance-batch/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceBatchIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAttendanceBatchIdGet', 'id', id)
            const localVarPath = `/api/attendance-batch/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AttendanceBatchCreateDto} [attendanceBatchCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceBatchPost: async (attendanceBatchCreateDto?: AttendanceBatchCreateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/attendance-batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attendanceBatchCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AttendanceBatchUpdateDto} [attendanceBatchUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceBatchPut: async (attendanceBatchUpdateDto?: AttendanceBatchUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/attendance-batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attendanceBatchUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttendanceBatchApi - functional programming interface
 * @export
 */
export const AttendanceBatchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttendanceBatchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Array<string>} [teacherId] 
         * @param {string} [teacherName] 
         * @param {string} [startTime] 
         * @param {string} [endTime] 
         * @param {number} [majorsCategoryId] 
         * @param {number} [majorsSubcategoriesId] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [q] 
         * @param {number} [sortCreateTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttendanceBatchGet(teacherId?: Array<string>, teacherName?: string, startTime?: string, endTime?: string, majorsCategoryId?: number, majorsSubcategoriesId?: number, page?: number, limit?: number, q?: string, sortCreateTime?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttendanceBatchResDtoListDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttendanceBatchGet(teacherId, teacherName, startTime, endTime, majorsCategoryId, majorsSubcategoriesId, page, limit, q, sortCreateTime, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendanceBatchApi.apiAttendanceBatchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttendanceBatchIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttendanceBatchIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendanceBatchApi.apiAttendanceBatchIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttendanceBatchIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttendanceBatchResDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttendanceBatchIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendanceBatchApi.apiAttendanceBatchIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AttendanceBatchCreateDto} [attendanceBatchCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttendanceBatchPost(attendanceBatchCreateDto?: AttendanceBatchCreateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttendanceBatchResDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttendanceBatchPost(attendanceBatchCreateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendanceBatchApi.apiAttendanceBatchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AttendanceBatchUpdateDto} [attendanceBatchUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttendanceBatchPut(attendanceBatchUpdateDto?: AttendanceBatchUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttendanceBatchPut(attendanceBatchUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendanceBatchApi.apiAttendanceBatchPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AttendanceBatchApi - factory interface
 * @export
 */
export const AttendanceBatchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttendanceBatchApiFp(configuration)
    return {
        /**
         * 
         * @param {Array<string>} [teacherId] 
         * @param {string} [teacherName] 
         * @param {string} [startTime] 
         * @param {string} [endTime] 
         * @param {number} [majorsCategoryId] 
         * @param {number} [majorsSubcategoriesId] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [q] 
         * @param {number} [sortCreateTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceBatchGet(teacherId?: Array<string>, teacherName?: string, startTime?: string, endTime?: string, majorsCategoryId?: number, majorsSubcategoriesId?: number, page?: number, limit?: number, q?: string, sortCreateTime?: number, options?: RawAxiosRequestConfig): AxiosPromise<AttendanceBatchResDtoListDtoApiResponse> {
            return localVarFp.apiAttendanceBatchGet(teacherId, teacherName, startTime, endTime, majorsCategoryId, majorsSubcategoriesId, page, limit, q, sortCreateTime, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceBatchIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiAttendanceBatchIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceBatchIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AttendanceBatchResDtoApiResponse> {
            return localVarFp.apiAttendanceBatchIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AttendanceBatchCreateDto} [attendanceBatchCreateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceBatchPost(attendanceBatchCreateDto?: AttendanceBatchCreateDto, options?: RawAxiosRequestConfig): AxiosPromise<AttendanceBatchResDtoApiResponse> {
            return localVarFp.apiAttendanceBatchPost(attendanceBatchCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AttendanceBatchUpdateDto} [attendanceBatchUpdateDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceBatchPut(attendanceBatchUpdateDto?: AttendanceBatchUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiAttendanceBatchPut(attendanceBatchUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttendanceBatchApi - object-oriented interface
 * @export
 * @class AttendanceBatchApi
 * @extends {BaseAPI}
 */
export class AttendanceBatchApi extends BaseAPI {
    /**
     * 
     * @param {Array<string>} [teacherId] 
     * @param {string} [teacherName] 
     * @param {string} [startTime] 
     * @param {string} [endTime] 
     * @param {number} [majorsCategoryId] 
     * @param {number} [majorsSubcategoriesId] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [q] 
     * @param {number} [sortCreateTime] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceBatchApi
     */
    public apiAttendanceBatchGet(teacherId?: Array<string>, teacherName?: string, startTime?: string, endTime?: string, majorsCategoryId?: number, majorsSubcategoriesId?: number, page?: number, limit?: number, q?: string, sortCreateTime?: number, options?: RawAxiosRequestConfig) {
        return AttendanceBatchApiFp(this.configuration).apiAttendanceBatchGet(teacherId, teacherName, startTime, endTime, majorsCategoryId, majorsSubcategoriesId, page, limit, q, sortCreateTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceBatchApi
     */
    public apiAttendanceBatchIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return AttendanceBatchApiFp(this.configuration).apiAttendanceBatchIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceBatchApi
     */
    public apiAttendanceBatchIdGet(id: number, options?: RawAxiosRequestConfig) {
        return AttendanceBatchApiFp(this.configuration).apiAttendanceBatchIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AttendanceBatchCreateDto} [attendanceBatchCreateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceBatchApi
     */
    public apiAttendanceBatchPost(attendanceBatchCreateDto?: AttendanceBatchCreateDto, options?: RawAxiosRequestConfig) {
        return AttendanceBatchApiFp(this.configuration).apiAttendanceBatchPost(attendanceBatchCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AttendanceBatchUpdateDto} [attendanceBatchUpdateDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceBatchApi
     */
    public apiAttendanceBatchPut(attendanceBatchUpdateDto?: AttendanceBatchUpdateDto, options?: RawAxiosRequestConfig) {
        return AttendanceBatchApiFp(this.configuration).apiAttendanceBatchPut(attendanceBatchUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ClassesApi - axios parameter creator
 * @export
 */
export const ClassesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [q] 
         * @param {number} [sortCreateTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesGet: async (page?: number, limit?: number, q?: string, sortCreateTime?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/classes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['Limit'] = limit;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (sortCreateTime !== undefined) {
                localVarQueryParameter['SortCreateTime'] = sortCreateTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiClassesIdDelete', 'id', id)
            const localVarPath = `/api/classes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiClassesIdGet', 'id', id)
            const localVarPath = `/api/classes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {GradeRequestDto} [gradeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesIdPut: async (id: number, gradeRequestDto?: GradeRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiClassesIdPut', 'id', id)
            const localVarPath = `/api/classes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gradeRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesIdStudentsGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiClassesIdStudentsGet', 'id', id)
            const localVarPath = `/api/classes/{id}/students`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesIdStudentsStudentIdPost: async (id: number, studentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiClassesIdStudentsStudentIdPost', 'id', id)
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('apiClassesIdStudentsStudentIdPost', 'studentId', studentId)
            const localVarPath = `/api/classes/{id}/students/{studentId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"studentId"}}`, encodeURIComponent(String(studentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GradeRequestDto} [gradeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesPost: async (gradeRequestDto?: GradeRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/classes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gradeRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClassesApi - functional programming interface
 * @export
 */
export const ClassesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClassesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [q] 
         * @param {number} [sortCreateTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClassesGet(page?: number, limit?: number, q?: string, sortCreateTime?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GradeResponseDtoListDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClassesGet(page, limit, q, sortCreateTime, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassesApi.apiClassesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClassesIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClassesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassesApi.apiClassesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClassesIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GradeResponseDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClassesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassesApi.apiClassesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {GradeRequestDto} [gradeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClassesIdPut(id: number, gradeRequestDto?: GradeRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClassesIdPut(id, gradeRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassesApi.apiClassesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClassesIdStudentsGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResDtoListApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClassesIdStudentsGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassesApi.apiClassesIdStudentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {string} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClassesIdStudentsStudentIdPost(id: number, studentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClassesIdStudentsStudentIdPost(id, studentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassesApi.apiClassesIdStudentsStudentIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GradeRequestDto} [gradeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClassesPost(gradeRequestDto?: GradeRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GradeResponseDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClassesPost(gradeRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassesApi.apiClassesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ClassesApi - factory interface
 * @export
 */
export const ClassesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClassesApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [q] 
         * @param {number} [sortCreateTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesGet(page?: number, limit?: number, q?: string, sortCreateTime?: number, options?: RawAxiosRequestConfig): AxiosPromise<GradeResponseDtoListDtoApiResponse> {
            return localVarFp.apiClassesGet(page, limit, q, sortCreateTime, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiClassesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<GradeResponseDtoApiResponse> {
            return localVarFp.apiClassesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {GradeRequestDto} [gradeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesIdPut(id: number, gradeRequestDto?: GradeRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiClassesIdPut(id, gradeRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesIdStudentsGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<GetUserResDtoListApiResponse> {
            return localVarFp.apiClassesIdStudentsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {string} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesIdStudentsStudentIdPost(id: number, studentId: string, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiClassesIdStudentsStudentIdPost(id, studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GradeRequestDto} [gradeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesPost(gradeRequestDto?: GradeRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<GradeResponseDtoApiResponse> {
            return localVarFp.apiClassesPost(gradeRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClassesApi - object-oriented interface
 * @export
 * @class ClassesApi
 * @extends {BaseAPI}
 */
export class ClassesApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [q] 
     * @param {number} [sortCreateTime] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassesApi
     */
    public apiClassesGet(page?: number, limit?: number, q?: string, sortCreateTime?: number, options?: RawAxiosRequestConfig) {
        return ClassesApiFp(this.configuration).apiClassesGet(page, limit, q, sortCreateTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassesApi
     */
    public apiClassesIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return ClassesApiFp(this.configuration).apiClassesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassesApi
     */
    public apiClassesIdGet(id: number, options?: RawAxiosRequestConfig) {
        return ClassesApiFp(this.configuration).apiClassesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {GradeRequestDto} [gradeRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassesApi
     */
    public apiClassesIdPut(id: number, gradeRequestDto?: GradeRequestDto, options?: RawAxiosRequestConfig) {
        return ClassesApiFp(this.configuration).apiClassesIdPut(id, gradeRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassesApi
     */
    public apiClassesIdStudentsGet(id: number, options?: RawAxiosRequestConfig) {
        return ClassesApiFp(this.configuration).apiClassesIdStudentsGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {string} studentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassesApi
     */
    public apiClassesIdStudentsStudentIdPost(id: number, studentId: string, options?: RawAxiosRequestConfig) {
        return ClassesApiFp(this.configuration).apiClassesIdStudentsStudentIdPost(id, studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GradeRequestDto} [gradeRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassesApi
     */
    public apiClassesPost(gradeRequestDto?: GradeRequestDto, options?: RawAxiosRequestConfig) {
        return ClassesApiFp(this.configuration).apiClassesPost(gradeRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseApi - axios parameter creator
 * @export
 */
export const CourseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array<string>} [studentIds] 
         * @param {Array<string>} [teacherIds] 
         * @param {number} [majorsCategoryId] 
         * @param {number} [majorsSubcategoriesId] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [q] 
         * @param {number} [sortCreateTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseGet: async (studentIds?: Array<string>, teacherIds?: Array<string>, majorsCategoryId?: number, majorsSubcategoriesId?: number, page?: number, limit?: number, q?: string, sortCreateTime?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/course`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentIds) {
                localVarQueryParameter['studentIds'] = studentIds;
            }

            if (teacherIds) {
                localVarQueryParameter['TeacherIds'] = teacherIds;
            }

            if (majorsCategoryId !== undefined) {
                localVarQueryParameter['MajorsCategoryId'] = majorsCategoryId;
            }

            if (majorsSubcategoriesId !== undefined) {
                localVarQueryParameter['MajorsSubcategoriesId'] = majorsSubcategoriesId;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['Limit'] = limit;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (sortCreateTime !== undefined) {
                localVarQueryParameter['SortCreateTime'] = sortCreateTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCourseIdDelete', 'id', id)
            const localVarPath = `/api/course/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCourseIdGet', 'id', id)
            const localVarPath = `/api/course/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CourseRequestDto} [courseRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseIdPut: async (id: number, courseRequestDto?: CourseRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCourseIdPut', 'id', id)
            const localVarPath = `/api/course/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CourseRequestDto} [courseRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCoursePost: async (courseRequestDto?: CourseRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/course`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseApi - functional programming interface
 * @export
 */
export const CourseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Array<string>} [studentIds] 
         * @param {Array<string>} [teacherIds] 
         * @param {number} [majorsCategoryId] 
         * @param {number} [majorsSubcategoriesId] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [q] 
         * @param {number} [sortCreateTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCourseGet(studentIds?: Array<string>, teacherIds?: Array<string>, majorsCategoryId?: number, majorsSubcategoriesId?: number, page?: number, limit?: number, q?: string, sortCreateTime?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseResponseListDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCourseGet(studentIds, teacherIds, majorsCategoryId, majorsSubcategoriesId, page, limit, q, sortCreateTime, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.apiCourseGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCourseIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCourseIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.apiCourseIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCourseIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseResponseDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCourseIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.apiCourseIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {CourseRequestDto} [courseRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCourseIdPut(id: number, courseRequestDto?: CourseRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCourseIdPut(id, courseRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.apiCourseIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CourseRequestDto} [courseRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCoursePost(courseRequestDto?: CourseRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseResponseDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCoursePost(courseRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.apiCoursePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseApi - factory interface
 * @export
 */
export const CourseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseApiFp(configuration)
    return {
        /**
         * 
         * @param {Array<string>} [studentIds] 
         * @param {Array<string>} [teacherIds] 
         * @param {number} [majorsCategoryId] 
         * @param {number} [majorsSubcategoriesId] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [q] 
         * @param {number} [sortCreateTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseGet(studentIds?: Array<string>, teacherIds?: Array<string>, majorsCategoryId?: number, majorsSubcategoriesId?: number, page?: number, limit?: number, q?: string, sortCreateTime?: number, options?: RawAxiosRequestConfig): AxiosPromise<CourseResponseListDtoApiResponse> {
            return localVarFp.apiCourseGet(studentIds, teacherIds, majorsCategoryId, majorsSubcategoriesId, page, limit, q, sortCreateTime, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiCourseIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<CourseResponseDtoApiResponse> {
            return localVarFp.apiCourseIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CourseRequestDto} [courseRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseIdPut(id: number, courseRequestDto?: CourseRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiCourseIdPut(id, courseRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CourseRequestDto} [courseRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCoursePost(courseRequestDto?: CourseRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<CourseResponseDtoApiResponse> {
            return localVarFp.apiCoursePost(courseRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CourseApi - object-oriented interface
 * @export
 * @class CourseApi
 * @extends {BaseAPI}
 */
export class CourseApi extends BaseAPI {
    /**
     * 
     * @param {Array<string>} [studentIds] 
     * @param {Array<string>} [teacherIds] 
     * @param {number} [majorsCategoryId] 
     * @param {number} [majorsSubcategoriesId] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [q] 
     * @param {number} [sortCreateTime] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public apiCourseGet(studentIds?: Array<string>, teacherIds?: Array<string>, majorsCategoryId?: number, majorsSubcategoriesId?: number, page?: number, limit?: number, q?: string, sortCreateTime?: number, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).apiCourseGet(studentIds, teacherIds, majorsCategoryId, majorsSubcategoriesId, page, limit, q, sortCreateTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public apiCourseIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).apiCourseIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public apiCourseIdGet(id: number, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).apiCourseIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CourseRequestDto} [courseRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public apiCourseIdPut(id: number, courseRequestDto?: CourseRequestDto, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).apiCourseIdPut(id, courseRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CourseRequestDto} [courseRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public apiCoursePost(courseRequestDto?: CourseRequestDto, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).apiCoursePost(courseRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseSelectionApi - axios parameter creator
 * @export
 */
export const CourseSelectionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [studentId] 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionAddGet: async (studentId?: string, courseId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/course-selection/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['studentId'] = studentId;
            }

            if (courseId !== undefined) {
                localVarQueryParameter['courseId'] = courseId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionAddSelfGet: async (courseId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/course-selection/add-self`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (courseId !== undefined) {
                localVarQueryParameter['courseId'] = courseId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [studentId] 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionDelGet: async (studentId?: string, courseId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/course-selection/del`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['studentId'] = studentId;
            }

            if (courseId !== undefined) {
                localVarQueryParameter['courseId'] = courseId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionDelSelfGet: async (courseId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/course-selection/del-self`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (courseId !== undefined) {
                localVarQueryParameter['courseId'] = courseId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [isAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionGetAllGet: async (isAll?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/course-selection/GetAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (isAll !== undefined) {
                localVarQueryParameter['isAll'] = isAll;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [studentId] 
         * @param {number} [courseId] 
         * @param {number} [performanceLevel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionPerformancePut: async (studentId?: string, courseId?: number, performanceLevel?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/course-selection/performance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['studentId'] = studentId;
            }

            if (courseId !== undefined) {
                localVarQueryParameter['courseId'] = courseId;
            }

            if (performanceLevel !== undefined) {
                localVarQueryParameter['PerformanceLevel'] = performanceLevel;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseSelectionApi - functional programming interface
 * @export
 */
export const CourseSelectionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseSelectionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [studentId] 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCourseSelectionAddGet(studentId?: string, courseId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCourseSelectionAddGet(studentId, courseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseSelectionApi.apiCourseSelectionAddGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCourseSelectionAddSelfGet(courseId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCourseSelectionAddSelfGet(courseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseSelectionApi.apiCourseSelectionAddSelfGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [studentId] 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCourseSelectionDelGet(studentId?: string, courseId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCourseSelectionDelGet(studentId, courseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseSelectionApi.apiCourseSelectionDelGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCourseSelectionDelSelfGet(courseId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCourseSelectionDelSelfGet(courseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseSelectionApi.apiCourseSelectionDelSelfGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {boolean} [isAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCourseSelectionGetAllGet(isAll?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseSelectionResDtoListApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCourseSelectionGetAllGet(isAll, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseSelectionApi.apiCourseSelectionGetAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [studentId] 
         * @param {number} [courseId] 
         * @param {number} [performanceLevel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCourseSelectionPerformancePut(studentId?: string, courseId?: number, performanceLevel?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCourseSelectionPerformancePut(studentId, courseId, performanceLevel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseSelectionApi.apiCourseSelectionPerformancePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseSelectionApi - factory interface
 * @export
 */
export const CourseSelectionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseSelectionApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [studentId] 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionAddGet(studentId?: string, courseId?: number, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiCourseSelectionAddGet(studentId, courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionAddSelfGet(courseId?: number, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiCourseSelectionAddSelfGet(courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [studentId] 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionDelGet(studentId?: string, courseId?: number, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiCourseSelectionDelGet(studentId, courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionDelSelfGet(courseId?: number, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiCourseSelectionDelSelfGet(courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} [isAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionGetAllGet(isAll?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<CourseSelectionResDtoListApiResponse> {
            return localVarFp.apiCourseSelectionGetAllGet(isAll, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [studentId] 
         * @param {number} [courseId] 
         * @param {number} [performanceLevel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionPerformancePut(studentId?: string, courseId?: number, performanceLevel?: number, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiCourseSelectionPerformancePut(studentId, courseId, performanceLevel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CourseSelectionApi - object-oriented interface
 * @export
 * @class CourseSelectionApi
 * @extends {BaseAPI}
 */
export class CourseSelectionApi extends BaseAPI {
    /**
     * 
     * @param {string} [studentId] 
     * @param {number} [courseId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseSelectionApi
     */
    public apiCourseSelectionAddGet(studentId?: string, courseId?: number, options?: RawAxiosRequestConfig) {
        return CourseSelectionApiFp(this.configuration).apiCourseSelectionAddGet(studentId, courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [courseId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseSelectionApi
     */
    public apiCourseSelectionAddSelfGet(courseId?: number, options?: RawAxiosRequestConfig) {
        return CourseSelectionApiFp(this.configuration).apiCourseSelectionAddSelfGet(courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [studentId] 
     * @param {number} [courseId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseSelectionApi
     */
    public apiCourseSelectionDelGet(studentId?: string, courseId?: number, options?: RawAxiosRequestConfig) {
        return CourseSelectionApiFp(this.configuration).apiCourseSelectionDelGet(studentId, courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [courseId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseSelectionApi
     */
    public apiCourseSelectionDelSelfGet(courseId?: number, options?: RawAxiosRequestConfig) {
        return CourseSelectionApiFp(this.configuration).apiCourseSelectionDelSelfGet(courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} [isAll] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseSelectionApi
     */
    public apiCourseSelectionGetAllGet(isAll?: boolean, options?: RawAxiosRequestConfig) {
        return CourseSelectionApiFp(this.configuration).apiCourseSelectionGetAllGet(isAll, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [studentId] 
     * @param {number} [courseId] 
     * @param {number} [performanceLevel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseSelectionApi
     */
    public apiCourseSelectionPerformancePut(studentId?: string, courseId?: number, performanceLevel?: number, options?: RawAxiosRequestConfig) {
        return CourseSelectionApiFp(this.configuration).apiCourseSelectionPerformancePut(studentId, courseId, performanceLevel, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MajorsCategoryApi - axios parameter creator
 * @export
 */
export const MajorsCategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMajorsCategoryDelete: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/majors-category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [q] 
         * @param {number} [sortCreateTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMajorsCategoryGet: async (page?: number, limit?: number, q?: string, sortCreateTime?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/majors-category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['Limit'] = limit;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (sortCreateTime !== undefined) {
                localVarQueryParameter['SortCreateTime'] = sortCreateTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMajorsCategoryIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMajorsCategoryIdGet', 'id', id)
            const localVarPath = `/api/majors-category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MajorsCategoryReqDto} [majorsCategoryReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMajorsCategoryPost: async (majorsCategoryReqDto?: MajorsCategoryReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/majors-category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(majorsCategoryReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {MajorsCategoryReqDto} [majorsCategoryReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMajorsCategoryPut: async (id?: number, majorsCategoryReqDto?: MajorsCategoryReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/majors-category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(majorsCategoryReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MajorsCategoryApi - functional programming interface
 * @export
 */
export const MajorsCategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MajorsCategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMajorsCategoryDelete(id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMajorsCategoryDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MajorsCategoryApi.apiMajorsCategoryDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [q] 
         * @param {number} [sortCreateTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMajorsCategoryGet(page?: number, limit?: number, q?: string, sortCreateTime?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MajorsCategoryResDtoListDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMajorsCategoryGet(page, limit, q, sortCreateTime, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MajorsCategoryApi.apiMajorsCategoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMajorsCategoryIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MajorsCategoryResDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMajorsCategoryIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MajorsCategoryApi.apiMajorsCategoryIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {MajorsCategoryReqDto} [majorsCategoryReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMajorsCategoryPost(majorsCategoryReqDto?: MajorsCategoryReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMajorsCategoryPost(majorsCategoryReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MajorsCategoryApi.apiMajorsCategoryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {MajorsCategoryReqDto} [majorsCategoryReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMajorsCategoryPut(id?: number, majorsCategoryReqDto?: MajorsCategoryReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMajorsCategoryPut(id, majorsCategoryReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MajorsCategoryApi.apiMajorsCategoryPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MajorsCategoryApi - factory interface
 * @export
 */
export const MajorsCategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MajorsCategoryApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMajorsCategoryDelete(id?: number, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiMajorsCategoryDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [q] 
         * @param {number} [sortCreateTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMajorsCategoryGet(page?: number, limit?: number, q?: string, sortCreateTime?: number, options?: RawAxiosRequestConfig): AxiosPromise<MajorsCategoryResDtoListDtoApiResponse> {
            return localVarFp.apiMajorsCategoryGet(page, limit, q, sortCreateTime, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMajorsCategoryIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<MajorsCategoryResDtoApiResponse> {
            return localVarFp.apiMajorsCategoryIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MajorsCategoryReqDto} [majorsCategoryReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMajorsCategoryPost(majorsCategoryReqDto?: MajorsCategoryReqDto, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiMajorsCategoryPost(majorsCategoryReqDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {MajorsCategoryReqDto} [majorsCategoryReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMajorsCategoryPut(id?: number, majorsCategoryReqDto?: MajorsCategoryReqDto, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiMajorsCategoryPut(id, majorsCategoryReqDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MajorsCategoryApi - object-oriented interface
 * @export
 * @class MajorsCategoryApi
 * @extends {BaseAPI}
 */
export class MajorsCategoryApi extends BaseAPI {
    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MajorsCategoryApi
     */
    public apiMajorsCategoryDelete(id?: number, options?: RawAxiosRequestConfig) {
        return MajorsCategoryApiFp(this.configuration).apiMajorsCategoryDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [q] 
     * @param {number} [sortCreateTime] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MajorsCategoryApi
     */
    public apiMajorsCategoryGet(page?: number, limit?: number, q?: string, sortCreateTime?: number, options?: RawAxiosRequestConfig) {
        return MajorsCategoryApiFp(this.configuration).apiMajorsCategoryGet(page, limit, q, sortCreateTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MajorsCategoryApi
     */
    public apiMajorsCategoryIdGet(id: number, options?: RawAxiosRequestConfig) {
        return MajorsCategoryApiFp(this.configuration).apiMajorsCategoryIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MajorsCategoryReqDto} [majorsCategoryReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MajorsCategoryApi
     */
    public apiMajorsCategoryPost(majorsCategoryReqDto?: MajorsCategoryReqDto, options?: RawAxiosRequestConfig) {
        return MajorsCategoryApiFp(this.configuration).apiMajorsCategoryPost(majorsCategoryReqDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {MajorsCategoryReqDto} [majorsCategoryReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MajorsCategoryApi
     */
    public apiMajorsCategoryPut(id?: number, majorsCategoryReqDto?: MajorsCategoryReqDto, options?: RawAxiosRequestConfig) {
        return MajorsCategoryApiFp(this.configuration).apiMajorsCategoryPut(id, majorsCategoryReqDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MajorsSubcategoryApi - axios parameter creator
 * @export
 */
export const MajorsSubcategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMajorsSubcategoryDelete: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/majors-subcategory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [majorId] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [q] 
         * @param {number} [sortCreateTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMajorsSubcategoryGet: async (majorId?: number, page?: number, limit?: number, q?: string, sortCreateTime?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/majors-subcategory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (majorId !== undefined) {
                localVarQueryParameter['MajorId'] = majorId;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['Limit'] = limit;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (sortCreateTime !== undefined) {
                localVarQueryParameter['SortCreateTime'] = sortCreateTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMajorsSubcategoryIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMajorsSubcategoryIdGet', 'id', id)
            const localVarPath = `/api/majors-subcategory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MajorsSubcategoryReqDto} [majorsSubcategoryReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMajorsSubcategoryPost: async (majorsSubcategoryReqDto?: MajorsSubcategoryReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/majors-subcategory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(majorsSubcategoryReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {MajorsSubcategoryReqDto} [majorsSubcategoryReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMajorsSubcategoryPut: async (id?: number, majorsSubcategoryReqDto?: MajorsSubcategoryReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/majors-subcategory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(majorsSubcategoryReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MajorsSubcategoryApi - functional programming interface
 * @export
 */
export const MajorsSubcategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MajorsSubcategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMajorsSubcategoryDelete(id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMajorsSubcategoryDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MajorsSubcategoryApi.apiMajorsSubcategoryDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [majorId] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [q] 
         * @param {number} [sortCreateTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMajorsSubcategoryGet(majorId?: number, page?: number, limit?: number, q?: string, sortCreateTime?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MajorsSubcategoryResDtoListDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMajorsSubcategoryGet(majorId, page, limit, q, sortCreateTime, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MajorsSubcategoryApi.apiMajorsSubcategoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMajorsSubcategoryIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MajorsSubcategoryResDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMajorsSubcategoryIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MajorsSubcategoryApi.apiMajorsSubcategoryIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {MajorsSubcategoryReqDto} [majorsSubcategoryReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMajorsSubcategoryPost(majorsSubcategoryReqDto?: MajorsSubcategoryReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMajorsSubcategoryPost(majorsSubcategoryReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MajorsSubcategoryApi.apiMajorsSubcategoryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {MajorsSubcategoryReqDto} [majorsSubcategoryReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMajorsSubcategoryPut(id?: number, majorsSubcategoryReqDto?: MajorsSubcategoryReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMajorsSubcategoryPut(id, majorsSubcategoryReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MajorsSubcategoryApi.apiMajorsSubcategoryPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MajorsSubcategoryApi - factory interface
 * @export
 */
export const MajorsSubcategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MajorsSubcategoryApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMajorsSubcategoryDelete(id?: number, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiMajorsSubcategoryDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [majorId] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [q] 
         * @param {number} [sortCreateTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMajorsSubcategoryGet(majorId?: number, page?: number, limit?: number, q?: string, sortCreateTime?: number, options?: RawAxiosRequestConfig): AxiosPromise<MajorsSubcategoryResDtoListDtoApiResponse> {
            return localVarFp.apiMajorsSubcategoryGet(majorId, page, limit, q, sortCreateTime, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMajorsSubcategoryIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<MajorsSubcategoryResDtoApiResponse> {
            return localVarFp.apiMajorsSubcategoryIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MajorsSubcategoryReqDto} [majorsSubcategoryReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMajorsSubcategoryPost(majorsSubcategoryReqDto?: MajorsSubcategoryReqDto, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiMajorsSubcategoryPost(majorsSubcategoryReqDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {MajorsSubcategoryReqDto} [majorsSubcategoryReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMajorsSubcategoryPut(id?: number, majorsSubcategoryReqDto?: MajorsSubcategoryReqDto, options?: RawAxiosRequestConfig): AxiosPromise<ObjectApiResponse> {
            return localVarFp.apiMajorsSubcategoryPut(id, majorsSubcategoryReqDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MajorsSubcategoryApi - object-oriented interface
 * @export
 * @class MajorsSubcategoryApi
 * @extends {BaseAPI}
 */
export class MajorsSubcategoryApi extends BaseAPI {
    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MajorsSubcategoryApi
     */
    public apiMajorsSubcategoryDelete(id?: number, options?: RawAxiosRequestConfig) {
        return MajorsSubcategoryApiFp(this.configuration).apiMajorsSubcategoryDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [majorId] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [q] 
     * @param {number} [sortCreateTime] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MajorsSubcategoryApi
     */
    public apiMajorsSubcategoryGet(majorId?: number, page?: number, limit?: number, q?: string, sortCreateTime?: number, options?: RawAxiosRequestConfig) {
        return MajorsSubcategoryApiFp(this.configuration).apiMajorsSubcategoryGet(majorId, page, limit, q, sortCreateTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MajorsSubcategoryApi
     */
    public apiMajorsSubcategoryIdGet(id: number, options?: RawAxiosRequestConfig) {
        return MajorsSubcategoryApiFp(this.configuration).apiMajorsSubcategoryIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MajorsSubcategoryReqDto} [majorsSubcategoryReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MajorsSubcategoryApi
     */
    public apiMajorsSubcategoryPost(majorsSubcategoryReqDto?: MajorsSubcategoryReqDto, options?: RawAxiosRequestConfig) {
        return MajorsSubcategoryApiFp(this.configuration).apiMajorsSubcategoryPost(majorsSubcategoryReqDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {MajorsSubcategoryReqDto} [majorsSubcategoryReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MajorsSubcategoryApi
     */
    public apiMajorsSubcategoryPut(id?: number, majorsSubcategoryReqDto?: MajorsSubcategoryReqDto, options?: RawAxiosRequestConfig) {
        return MajorsSubcategoryApiFp(this.configuration).apiMajorsSubcategoryPut(id, majorsSubcategoryReqDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TimeTableApi - axios parameter creator
 * @export
 */
export const TimeTableApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimeTableGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/time-table`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimeTableIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTimeTableIdGet', 'id', id)
            const localVarPath = `/api/time-table/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimeTableApi - functional programming interface
 * @export
 */
export const TimeTableApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimeTableApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTimeTableGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeTableResDtoListApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTimeTableGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TimeTableApi.apiTimeTableGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTimeTableIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeTableResDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTimeTableIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TimeTableApi.apiTimeTableIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TimeTableApi - factory interface
 * @export
 */
export const TimeTableApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimeTableApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimeTableGet(options?: RawAxiosRequestConfig): AxiosPromise<TimeTableResDtoListApiResponse> {
            return localVarFp.apiTimeTableGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimeTableIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<TimeTableResDtoApiResponse> {
            return localVarFp.apiTimeTableIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TimeTableApi - object-oriented interface
 * @export
 * @class TimeTableApi
 * @extends {BaseAPI}
 */
export class TimeTableApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTableApi
     */
    public apiTimeTableGet(options?: RawAxiosRequestConfig) {
        return TimeTableApiFp(this.configuration).apiTimeTableGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTableApi
     */
    public apiTimeTableIdGet(id: number, options?: RawAxiosRequestConfig) {
        return TimeTableApiFp(this.configuration).apiTimeTableIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



