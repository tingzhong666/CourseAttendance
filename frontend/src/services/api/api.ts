/* tslint:disable */
/* eslint-disable */
/**
 * Demo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AttendanceCreateRequestDto
 */
export interface AttendanceCreateRequestDto {
    /**
     * 
     * @type {string}
     * @memberof AttendanceCreateRequestDto
     */
    'passWord'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AttendanceCreateRequestDto
     */
    'endTime': string;
    /**
     * 
     * @type {number}
     * @memberof AttendanceCreateRequestDto
     */
    'courseId': number;
    /**
     * 
     * @type {CheckMethod}
     * @memberof AttendanceCreateRequestDto
     */
    'checkMethod': CheckMethod;
}


/**
 * 
 * @export
 * @interface AttendanceRequestDto
 */
export interface AttendanceRequestDto {
    /**
     * 
     * @type {number}
     * @memberof AttendanceRequestDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof AttendanceRequestDto
     */
    'passWord'?: string | null;
}
/**
 * 
 * @export
 * @interface AttendanceResponseDto
 */
export interface AttendanceResponseDto {
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponseDto
     */
    'signInTime'?: string | null;
    /**
     * 
     * @type {AttendanceStatus}
     * @memberof AttendanceResponseDto
     */
    'status'?: AttendanceStatus;
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponseDto
     */
    'remark'?: string | null;
    /**
     * 
     * @type {CheckMethod}
     * @memberof AttendanceResponseDto
     */
    'checkMethod'?: CheckMethod;
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponseDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponseDto
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponseDto
     */
    'endTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof AttendanceResponseDto
     */
    'courseId'?: number;
    /**
     * 
     * @type {string}
     * @memberof AttendanceResponseDto
     */
    'studentId'?: string | null;
}


/**
 * 
 * @export
 * @enum {number}
 */

export const AttendanceStatus = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type AttendanceStatus = typeof AttendanceStatus[keyof typeof AttendanceStatus];


/**
 * 
 * @export
 * @interface ChangePasswordReqDto
 */
export interface ChangePasswordReqDto {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordReqDto
     */
    'newPassword': string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordReqDto
     */
    'confirmPassword': string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordReqDto
     */
    'currentPassword': string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordReqDto
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface ChangePasswordSelfReqDto
 */
export interface ChangePasswordSelfReqDto {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordSelfReqDto
     */
    'newPassword': string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordSelfReqDto
     */
    'confirmPassword': string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordSelfReqDto
     */
    'currentPassword': string;
}
/**
 * 
 * @export
 * @enum {number}
 */

export const CheckMethod = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type CheckMethod = typeof CheckMethod[keyof typeof CheckMethod];


/**
 * 
 * @export
 * @interface CourseRequestDto
 */
export interface CourseRequestDto {
    /**
     * 
     * @type {string}
     * @memberof CourseRequestDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CourseRequestDto
     */
    'weekday': string;
    /**
     * 
     * @type {string}
     * @memberof CourseRequestDto
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof CourseRequestDto
     */
    'endTime': string;
    /**
     * 
     * @type {string}
     * @memberof CourseRequestDto
     */
    'location': string;
    /**
     * 
     * @type {string}
     * @memberof CourseRequestDto
     */
    'teacherId': string;
}
/**
 * 
 * @export
 * @interface CourseResponseDto
 */
export interface CourseResponseDto {
    /**
     * 
     * @type {number}
     * @memberof CourseResponseDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CourseResponseDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CourseResponseDto
     */
    'weekday': string;
    /**
     * 
     * @type {string}
     * @memberof CourseResponseDto
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof CourseResponseDto
     */
    'endTime': string;
    /**
     * 
     * @type {string}
     * @memberof CourseResponseDto
     */
    'location': string;
    /**
     * 
     * @type {string}
     * @memberof CourseResponseDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseResponseDto
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CourseResponseDto
     */
    'teacherId': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CourseResponseDto
     */
    'studentIds': Array<string>;
}
/**
 * 
 * @export
 * @interface CourseSelectionResDto
 */
export interface CourseSelectionResDto {
    /**
     * 
     * @type {PerformanceLevel}
     * @memberof CourseSelectionResDto
     */
    'performance'?: PerformanceLevel;
    /**
     * 
     * @type {string}
     * @memberof CourseSelectionResDto
     */
    'studentId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CourseSelectionResDto
     */
    'courseId'?: number;
}


/**
 * 
 * @export
 * @interface CreateUserAcademicReqDto
 */
export interface CreateUserAcademicReqDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserAcademicReqDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserAcademicReqDto
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserAcademicReqDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserAcademicReqDto
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserAcademicReqDto
     */
    'passWord': string;
}
/**
 * 
 * @export
 * @interface CreateUserAdminReqDto
 */
export interface CreateUserAdminReqDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserAdminReqDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserAdminReqDto
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserAdminReqDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserAdminReqDto
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserAdminReqDto
     */
    'passWord': string;
}
/**
 * 
 * @export
 * @interface CreateUserStudentReqDto
 */
export interface CreateUserStudentReqDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserStudentReqDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserStudentReqDto
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserStudentReqDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserStudentReqDto
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserStudentReqDto
     */
    'passWord': string;
    /**
     * 
     * @type {number}
     * @memberof CreateUserStudentReqDto
     */
    'gradId': number;
}
/**
 * 
 * @export
 * @interface CreateUserTeacherReqDto
 */
export interface CreateUserTeacherReqDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserTeacherReqDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserTeacherReqDto
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserTeacherReqDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserTeacherReqDto
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserTeacherReqDto
     */
    'passWord': string;
}
/**
 * 
 * @export
 * @interface GetStudentResDto
 */
export interface GetStudentResDto {
    /**
     * 
     * @type {string}
     * @memberof GetStudentResDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetStudentResDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GetStudentResDto
     */
    'userName': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetStudentResDto
     */
    'roles': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GetStudentResDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetStudentResDto
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GetStudentResDto
     */
    'gradeId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof GetStudentResDto
     */
    'courses': Array<number>;
}
/**
 * 
 * @export
 * @interface GetTeacherResDto
 */
export interface GetTeacherResDto {
    /**
     * 
     * @type {string}
     * @memberof GetTeacherResDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetTeacherResDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GetTeacherResDto
     */
    'userName': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetTeacherResDto
     */
    'roles': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GetTeacherResDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetTeacherResDto
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof GetTeacherResDto
     */
    'courseIds'?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface GradeRequestDto
 */
export interface GradeRequestDto {
    /**
     * 
     * @type {string}
     * @memberof GradeRequestDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface GradeResponseDto
 */
export interface GradeResponseDto {
    /**
     * 
     * @type {number}
     * @memberof GradeResponseDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GradeResponseDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GradeResponseDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GradeResponseDto
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface LoginModel
 */
export interface LoginModel {
    /**
     * 
     * @type {string}
     * @memberof LoginModel
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof LoginModel
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginRes
 */
export interface LoginRes {
    /**
     * 
     * @type {string}
     * @memberof LoginRes
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRes
     */
    'userName': string;
}
/**
 * 
 * @export
 * @enum {number}
 */

export const PerformanceLevel = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type PerformanceLevel = typeof PerformanceLevel[keyof typeof PerformanceLevel];


/**
 * 
 * @export
 * @interface UpdateProfileAcademicReqDto
 */
export interface UpdateProfileAcademicReqDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileAcademicReqDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileAcademicReqDto
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileAcademicReqDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface UpdateProfileAdminReqDto
 */
export interface UpdateProfileAdminReqDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileAdminReqDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileAdminReqDto
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileAdminReqDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface UpdateProfileStudentReqDto
 */
export interface UpdateProfileStudentReqDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileStudentReqDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileStudentReqDto
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileStudentReqDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateProfileStudentReqDto
     */
    'gradeId'?: number;
}
/**
 * 
 * @export
 * @interface UpdateProfileTeacherReqDto
 */
export interface UpdateProfileTeacherReqDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileTeacherReqDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileTeacherReqDto
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileTeacherReqDto
     */
    'name': string;
}

/**
 * AcademicApi - axios parameter creator
 * @export
 */
export const AcademicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAcademicIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAcademicIdGet', 'id', id)
            const localVarPath = `/api/academic/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUserAcademicReqDto} [createUserAcademicReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAcademicPost: async (createUserAcademicReqDto?: CreateUserAcademicReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/academic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserAcademicReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {UpdateProfileAcademicReqDto} [updateProfileAcademicReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAcademicProfilePut: async (id?: string, updateProfileAcademicReqDto?: UpdateProfileAcademicReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/academic/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileAcademicReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAcademicProfileSlefGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/academic/profile-slef`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateProfileAcademicReqDto} [updateProfileAcademicReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAcademicProfileSlefPut: async (updateProfileAcademicReqDto?: UpdateProfileAcademicReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/academic/profile-slef`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileAcademicReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AcademicApi - functional programming interface
 * @export
 */
export const AcademicApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AcademicApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAcademicIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAcademicIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AcademicApi.apiAcademicIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateUserAcademicReqDto} [createUserAcademicReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAcademicPost(createUserAcademicReqDto?: CreateUserAcademicReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAcademicPost(createUserAcademicReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AcademicApi.apiAcademicPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {UpdateProfileAcademicReqDto} [updateProfileAcademicReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAcademicProfilePut(id?: string, updateProfileAcademicReqDto?: UpdateProfileAcademicReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAcademicProfilePut(id, updateProfileAcademicReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AcademicApi.apiAcademicProfilePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAcademicProfileSlefGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAcademicProfileSlefGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AcademicApi.apiAcademicProfileSlefGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateProfileAcademicReqDto} [updateProfileAcademicReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAcademicProfileSlefPut(updateProfileAcademicReqDto?: UpdateProfileAcademicReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAcademicProfileSlefPut(updateProfileAcademicReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AcademicApi.apiAcademicProfileSlefPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AcademicApi - factory interface
 * @export
 */
export const AcademicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AcademicApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAcademicIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAcademicIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateUserAcademicReqDto} [createUserAcademicReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAcademicPost(createUserAcademicReqDto?: CreateUserAcademicReqDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAcademicPost(createUserAcademicReqDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {UpdateProfileAcademicReqDto} [updateProfileAcademicReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAcademicProfilePut(id?: string, updateProfileAcademicReqDto?: UpdateProfileAcademicReqDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAcademicProfilePut(id, updateProfileAcademicReqDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAcademicProfileSlefGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAcademicProfileSlefGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateProfileAcademicReqDto} [updateProfileAcademicReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAcademicProfileSlefPut(updateProfileAcademicReqDto?: UpdateProfileAcademicReqDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAcademicProfileSlefPut(updateProfileAcademicReqDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AcademicApi - object-oriented interface
 * @export
 * @class AcademicApi
 * @extends {BaseAPI}
 */
export class AcademicApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcademicApi
     */
    public apiAcademicIdGet(id: string, options?: RawAxiosRequestConfig) {
        return AcademicApiFp(this.configuration).apiAcademicIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateUserAcademicReqDto} [createUserAcademicReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcademicApi
     */
    public apiAcademicPost(createUserAcademicReqDto?: CreateUserAcademicReqDto, options?: RawAxiosRequestConfig) {
        return AcademicApiFp(this.configuration).apiAcademicPost(createUserAcademicReqDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {UpdateProfileAcademicReqDto} [updateProfileAcademicReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcademicApi
     */
    public apiAcademicProfilePut(id?: string, updateProfileAcademicReqDto?: UpdateProfileAcademicReqDto, options?: RawAxiosRequestConfig) {
        return AcademicApiFp(this.configuration).apiAcademicProfilePut(id, updateProfileAcademicReqDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcademicApi
     */
    public apiAcademicProfileSlefGet(options?: RawAxiosRequestConfig) {
        return AcademicApiFp(this.configuration).apiAcademicProfileSlefGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateProfileAcademicReqDto} [updateProfileAcademicReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AcademicApi
     */
    public apiAcademicProfileSlefPut(updateProfileAcademicReqDto?: UpdateProfileAcademicReqDto, options?: RawAxiosRequestConfig) {
        return AcademicApiFp(this.configuration).apiAcademicProfileSlefPut(updateProfileAcademicReqDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ChangePasswordReqDto} [changePasswordReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountChangePasswordPut: async (changePasswordReqDto?: ChangePasswordReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ChangePasswordSelfReqDto} [changePasswordSelfReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountChangePasswordSelfPut: async (changePasswordSelfReqDto?: ChangePasswordSelfReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/change-password-self`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordSelfReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountCheckGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountIdDelete', 'id', id)
            const localVarPath = `/api/account/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountIdGet', 'id', id)
            const localVarPath = `/api/account/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginModel} [loginModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountLoginPost: async (loginModel?: LoginModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountProfileSelfGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/profile-self`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ChangePasswordReqDto} [changePasswordReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountChangePasswordPut(changePasswordReqDto?: ChangePasswordReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountChangePasswordPut(changePasswordReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountChangePasswordPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ChangePasswordSelfReqDto} [changePasswordSelfReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountChangePasswordSelfPut(changePasswordSelfReqDto?: ChangePasswordSelfReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountChangePasswordSelfPut(changePasswordSelfReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountChangePasswordSelfPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountCheckGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountCheckGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountCheckGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginModel} [loginModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountLoginPost(loginModel?: LoginModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountLoginPost(loginModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountProfileSelfGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountProfileSelfGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountProfileSelfGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * 
         * @param {ChangePasswordReqDto} [changePasswordReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountChangePasswordPut(changePasswordReqDto?: ChangePasswordReqDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAccountChangePasswordPut(changePasswordReqDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ChangePasswordSelfReqDto} [changePasswordSelfReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountChangePasswordSelfPut(changePasswordSelfReqDto?: ChangePasswordSelfReqDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAccountChangePasswordSelfPut(changePasswordSelfReqDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountCheckGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAccountCheckGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAccountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAccountIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAccountIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginModel} [loginModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountLoginPost(loginModel?: LoginModel, options?: RawAxiosRequestConfig): AxiosPromise<LoginRes> {
            return localVarFp.apiAccountLoginPost(loginModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountProfileSelfGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAccountProfileSelfGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 
     * @param {ChangePasswordReqDto} [changePasswordReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountChangePasswordPut(changePasswordReqDto?: ChangePasswordReqDto, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountChangePasswordPut(changePasswordReqDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ChangePasswordSelfReqDto} [changePasswordSelfReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountChangePasswordSelfPut(changePasswordSelfReqDto?: ChangePasswordSelfReqDto, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountChangePasswordSelfPut(changePasswordSelfReqDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountCheckGet(options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountCheckGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountGet(options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountIdGet(id: string, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginModel} [loginModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountLoginPost(loginModel?: LoginModel, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountLoginPost(loginModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountProfileSelfGet(options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountProfileSelfGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAdminIdGet', 'id', id)
            const localVarPath = `/api/admin/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUserAdminReqDto} [createUserAdminReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminPost: async (createUserAdminReqDto?: CreateUserAdminReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserAdminReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {UpdateProfileAdminReqDto} [updateProfileAdminReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminProfilePut: async (id?: string, updateProfileAdminReqDto?: UpdateProfileAdminReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileAdminReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminProfileSlefGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/profile-slef`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateProfileAdminReqDto} [updateProfileAdminReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminProfileSlefPut: async (updateProfileAdminReqDto?: UpdateProfileAdminReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/profile-slef`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileAdminReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.apiAdminIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateUserAdminReqDto} [createUserAdminReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminPost(createUserAdminReqDto?: CreateUserAdminReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminPost(createUserAdminReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.apiAdminPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {UpdateProfileAdminReqDto} [updateProfileAdminReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminProfilePut(id?: string, updateProfileAdminReqDto?: UpdateProfileAdminReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminProfilePut(id, updateProfileAdminReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.apiAdminProfilePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminProfileSlefGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminProfileSlefGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.apiAdminProfileSlefGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateProfileAdminReqDto} [updateProfileAdminReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminProfileSlefPut(updateProfileAdminReqDto?: UpdateProfileAdminReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminProfileSlefPut(updateProfileAdminReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.apiAdminProfileSlefPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAdminIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateUserAdminReqDto} [createUserAdminReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminPost(createUserAdminReqDto?: CreateUserAdminReqDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAdminPost(createUserAdminReqDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {UpdateProfileAdminReqDto} [updateProfileAdminReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminProfilePut(id?: string, updateProfileAdminReqDto?: UpdateProfileAdminReqDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAdminProfilePut(id, updateProfileAdminReqDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminProfileSlefGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAdminProfileSlefGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateProfileAdminReqDto} [updateProfileAdminReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminProfileSlefPut(updateProfileAdminReqDto?: UpdateProfileAdminReqDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAdminProfileSlefPut(updateProfileAdminReqDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public apiAdminIdGet(id: string, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).apiAdminIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateUserAdminReqDto} [createUserAdminReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public apiAdminPost(createUserAdminReqDto?: CreateUserAdminReqDto, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).apiAdminPost(createUserAdminReqDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {UpdateProfileAdminReqDto} [updateProfileAdminReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public apiAdminProfilePut(id?: string, updateProfileAdminReqDto?: UpdateProfileAdminReqDto, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).apiAdminProfilePut(id, updateProfileAdminReqDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public apiAdminProfileSlefGet(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).apiAdminProfileSlefGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateProfileAdminReqDto} [updateProfileAdminReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public apiAdminProfileSlefPut(updateProfileAdminReqDto?: UpdateProfileAdminReqDto, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).apiAdminProfileSlefPut(updateProfileAdminReqDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AttendanceApi - axios parameter creator
 * @export
 */
export const AttendanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [courseId] 
         * @param {string} [studentId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceGet: async (courseId?: number, studentId?: string, startDate?: string, endDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/attendance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (courseId !== undefined) {
                localVarQueryParameter['CourseId'] = courseId;
            }

            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['StartDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAttendanceIdDelete', 'id', id)
            const localVarPath = `/api/attendance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAttendanceIdGet', 'id', id)
            const localVarPath = `/api/attendance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AttendanceCreateRequestDto} [attendanceCreateRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendancePost: async (attendanceCreateRequestDto?: AttendanceCreateRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/attendance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attendanceCreateRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {AttendanceStatus} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendancePut: async (id?: number, status?: AttendanceStatus, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/attendance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AttendanceRequestDto} [attendanceRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceSignInPut: async (attendanceRequestDto?: AttendanceRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/attendance/sign-in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attendanceRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttendanceApi - functional programming interface
 * @export
 */
export const AttendanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttendanceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [courseId] 
         * @param {string} [studentId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttendanceGet(courseId?: number, studentId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AttendanceResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttendanceGet(courseId, studentId, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendanceApi.apiAttendanceGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttendanceIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttendanceIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendanceApi.apiAttendanceIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttendanceIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttendanceResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttendanceIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendanceApi.apiAttendanceIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AttendanceCreateRequestDto} [attendanceCreateRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttendancePost(attendanceCreateRequestDto?: AttendanceCreateRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AttendanceResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttendancePost(attendanceCreateRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendanceApi.apiAttendancePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {AttendanceStatus} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttendancePut(id?: number, status?: AttendanceStatus, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttendancePut(id, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendanceApi.apiAttendancePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AttendanceRequestDto} [attendanceRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAttendanceSignInPut(attendanceRequestDto?: AttendanceRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAttendanceSignInPut(attendanceRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendanceApi.apiAttendanceSignInPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AttendanceApi - factory interface
 * @export
 */
export const AttendanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttendanceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [courseId] 
         * @param {string} [studentId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceGet(courseId?: number, studentId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<AttendanceResponseDto>> {
            return localVarFp.apiAttendanceGet(courseId, studentId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAttendanceIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<AttendanceResponseDto> {
            return localVarFp.apiAttendanceIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AttendanceCreateRequestDto} [attendanceCreateRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendancePost(attendanceCreateRequestDto?: AttendanceCreateRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<Array<AttendanceResponseDto>> {
            return localVarFp.apiAttendancePost(attendanceCreateRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [id] 
         * @param {AttendanceStatus} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendancePut(id?: number, status?: AttendanceStatus, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAttendancePut(id, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AttendanceRequestDto} [attendanceRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAttendanceSignInPut(attendanceRequestDto?: AttendanceRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAttendanceSignInPut(attendanceRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttendanceApi - object-oriented interface
 * @export
 * @class AttendanceApi
 * @extends {BaseAPI}
 */
export class AttendanceApi extends BaseAPI {
    /**
     * 
     * @param {number} [courseId] 
     * @param {string} [studentId] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceApi
     */
    public apiAttendanceGet(courseId?: number, studentId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) {
        return AttendanceApiFp(this.configuration).apiAttendanceGet(courseId, studentId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceApi
     */
    public apiAttendanceIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return AttendanceApiFp(this.configuration).apiAttendanceIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceApi
     */
    public apiAttendanceIdGet(id: number, options?: RawAxiosRequestConfig) {
        return AttendanceApiFp(this.configuration).apiAttendanceIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AttendanceCreateRequestDto} [attendanceCreateRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceApi
     */
    public apiAttendancePost(attendanceCreateRequestDto?: AttendanceCreateRequestDto, options?: RawAxiosRequestConfig) {
        return AttendanceApiFp(this.configuration).apiAttendancePost(attendanceCreateRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [id] 
     * @param {AttendanceStatus} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceApi
     */
    public apiAttendancePut(id?: number, status?: AttendanceStatus, options?: RawAxiosRequestConfig) {
        return AttendanceApiFp(this.configuration).apiAttendancePut(id, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AttendanceRequestDto} [attendanceRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendanceApi
     */
    public apiAttendanceSignInPut(attendanceRequestDto?: AttendanceRequestDto, options?: RawAxiosRequestConfig) {
        return AttendanceApiFp(this.configuration).apiAttendanceSignInPut(attendanceRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ClassesApi - axios parameter creator
 * @export
 */
export const ClassesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/classes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiClassesIdDelete', 'id', id)
            const localVarPath = `/api/classes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiClassesIdGet', 'id', id)
            const localVarPath = `/api/classes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {GradeRequestDto} [gradeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesIdPut: async (id: number, gradeRequestDto?: GradeRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiClassesIdPut', 'id', id)
            const localVarPath = `/api/classes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gradeRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesIdStudentsGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiClassesIdStudentsGet', 'id', id)
            const localVarPath = `/api/classes/{id}/students`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesIdStudentsStudentIdPost: async (id: number, studentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiClassesIdStudentsStudentIdPost', 'id', id)
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('apiClassesIdStudentsStudentIdPost', 'studentId', studentId)
            const localVarPath = `/api/classes/{id}/students/{studentId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"studentId"}}`, encodeURIComponent(String(studentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GradeRequestDto} [gradeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesPost: async (gradeRequestDto?: GradeRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/classes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gradeRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClassesApi - functional programming interface
 * @export
 */
export const ClassesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClassesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClassesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GradeResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClassesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassesApi.apiClassesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClassesIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClassesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassesApi.apiClassesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClassesIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GradeResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClassesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassesApi.apiClassesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {GradeRequestDto} [gradeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClassesIdPut(id: number, gradeRequestDto?: GradeRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClassesIdPut(id, gradeRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassesApi.apiClassesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClassesIdStudentsGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetStudentResDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClassesIdStudentsGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassesApi.apiClassesIdStudentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {string} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClassesIdStudentsStudentIdPost(id: number, studentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClassesIdStudentsStudentIdPost(id, studentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassesApi.apiClassesIdStudentsStudentIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GradeRequestDto} [gradeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiClassesPost(gradeRequestDto?: GradeRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GradeResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiClassesPost(gradeRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassesApi.apiClassesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ClassesApi - factory interface
 * @export
 */
export const ClassesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClassesApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<GradeResponseDto>> {
            return localVarFp.apiClassesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiClassesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<GradeResponseDto> {
            return localVarFp.apiClassesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {GradeRequestDto} [gradeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesIdPut(id: number, gradeRequestDto?: GradeRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiClassesIdPut(id, gradeRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesIdStudentsGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetStudentResDto>> {
            return localVarFp.apiClassesIdStudentsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {string} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesIdStudentsStudentIdPost(id: number, studentId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiClassesIdStudentsStudentIdPost(id, studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GradeRequestDto} [gradeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiClassesPost(gradeRequestDto?: GradeRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<GradeResponseDto> {
            return localVarFp.apiClassesPost(gradeRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClassesApi - object-oriented interface
 * @export
 * @class ClassesApi
 * @extends {BaseAPI}
 */
export class ClassesApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassesApi
     */
    public apiClassesGet(options?: RawAxiosRequestConfig) {
        return ClassesApiFp(this.configuration).apiClassesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassesApi
     */
    public apiClassesIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return ClassesApiFp(this.configuration).apiClassesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassesApi
     */
    public apiClassesIdGet(id: number, options?: RawAxiosRequestConfig) {
        return ClassesApiFp(this.configuration).apiClassesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {GradeRequestDto} [gradeRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassesApi
     */
    public apiClassesIdPut(id: number, gradeRequestDto?: GradeRequestDto, options?: RawAxiosRequestConfig) {
        return ClassesApiFp(this.configuration).apiClassesIdPut(id, gradeRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassesApi
     */
    public apiClassesIdStudentsGet(id: number, options?: RawAxiosRequestConfig) {
        return ClassesApiFp(this.configuration).apiClassesIdStudentsGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {string} studentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassesApi
     */
    public apiClassesIdStudentsStudentIdPost(id: number, studentId: string, options?: RawAxiosRequestConfig) {
        return ClassesApiFp(this.configuration).apiClassesIdStudentsStudentIdPost(id, studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GradeRequestDto} [gradeRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassesApi
     */
    public apiClassesPost(gradeRequestDto?: GradeRequestDto, options?: RawAxiosRequestConfig) {
        return ClassesApiFp(this.configuration).apiClassesPost(gradeRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseApi - axios parameter creator
 * @export
 */
export const CourseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/course`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCourseIdDelete', 'id', id)
            const localVarPath = `/api/course/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCourseIdGet', 'id', id)
            const localVarPath = `/api/course/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CourseRequestDto} [courseRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseIdPut: async (id: number, courseRequestDto?: CourseRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCourseIdPut', 'id', id)
            const localVarPath = `/api/course/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CourseRequestDto} [courseRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCoursePost: async (courseRequestDto?: CourseRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/course`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseApi - functional programming interface
 * @export
 */
export const CourseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCourseGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCourseGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.apiCourseGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCourseIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCourseIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.apiCourseIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCourseIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCourseIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.apiCourseIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {CourseRequestDto} [courseRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCourseIdPut(id: number, courseRequestDto?: CourseRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCourseIdPut(id, courseRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.apiCourseIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CourseRequestDto} [courseRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCoursePost(courseRequestDto?: CourseRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCoursePost(courseRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.apiCoursePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseApi - factory interface
 * @export
 */
export const CourseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<CourseResponseDto>> {
            return localVarFp.apiCourseGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCourseIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<CourseResponseDto> {
            return localVarFp.apiCourseIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CourseRequestDto} [courseRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseIdPut(id: number, courseRequestDto?: CourseRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCourseIdPut(id, courseRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CourseRequestDto} [courseRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCoursePost(courseRequestDto?: CourseRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCoursePost(courseRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CourseApi - object-oriented interface
 * @export
 * @class CourseApi
 * @extends {BaseAPI}
 */
export class CourseApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public apiCourseGet(options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).apiCourseGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public apiCourseIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).apiCourseIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public apiCourseIdGet(id: number, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).apiCourseIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CourseRequestDto} [courseRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public apiCourseIdPut(id: number, courseRequestDto?: CourseRequestDto, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).apiCourseIdPut(id, courseRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CourseRequestDto} [courseRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public apiCoursePost(courseRequestDto?: CourseRequestDto, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).apiCoursePost(courseRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseSelectionApi - axios parameter creator
 * @export
 */
export const CourseSelectionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [studentId] 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionAddGet: async (studentId?: string, courseId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/course-selection/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['studentId'] = studentId;
            }

            if (courseId !== undefined) {
                localVarQueryParameter['courseId'] = courseId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionAddSelfGet: async (courseId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/course-selection/add-self`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (courseId !== undefined) {
                localVarQueryParameter['courseId'] = courseId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [studentId] 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionDelGet: async (studentId?: string, courseId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/course-selection/del`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['studentId'] = studentId;
            }

            if (courseId !== undefined) {
                localVarQueryParameter['courseId'] = courseId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionDelSelfGet: async (courseId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/course-selection/del-self`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (courseId !== undefined) {
                localVarQueryParameter['courseId'] = courseId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [isAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionGetAllGet: async (isAll?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/course-selection/GetAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (isAll !== undefined) {
                localVarQueryParameter['isAll'] = isAll;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [studentId] 
         * @param {number} [courseId] 
         * @param {number} [performanceLevel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionPerformancePut: async (studentId?: string, courseId?: number, performanceLevel?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/course-selection/performance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentId !== undefined) {
                localVarQueryParameter['studentId'] = studentId;
            }

            if (courseId !== undefined) {
                localVarQueryParameter['courseId'] = courseId;
            }

            if (performanceLevel !== undefined) {
                localVarQueryParameter['PerformanceLevel'] = performanceLevel;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseSelectionApi - functional programming interface
 * @export
 */
export const CourseSelectionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseSelectionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [studentId] 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCourseSelectionAddGet(studentId?: string, courseId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCourseSelectionAddGet(studentId, courseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseSelectionApi.apiCourseSelectionAddGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCourseSelectionAddSelfGet(courseId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCourseSelectionAddSelfGet(courseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseSelectionApi.apiCourseSelectionAddSelfGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [studentId] 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCourseSelectionDelGet(studentId?: string, courseId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCourseSelectionDelGet(studentId, courseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseSelectionApi.apiCourseSelectionDelGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCourseSelectionDelSelfGet(courseId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCourseSelectionDelSelfGet(courseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseSelectionApi.apiCourseSelectionDelSelfGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {boolean} [isAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCourseSelectionGetAllGet(isAll?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseSelectionResDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCourseSelectionGetAllGet(isAll, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseSelectionApi.apiCourseSelectionGetAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [studentId] 
         * @param {number} [courseId] 
         * @param {number} [performanceLevel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCourseSelectionPerformancePut(studentId?: string, courseId?: number, performanceLevel?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCourseSelectionPerformancePut(studentId, courseId, performanceLevel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseSelectionApi.apiCourseSelectionPerformancePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseSelectionApi - factory interface
 * @export
 */
export const CourseSelectionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseSelectionApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [studentId] 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionAddGet(studentId?: string, courseId?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCourseSelectionAddGet(studentId, courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionAddSelfGet(courseId?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCourseSelectionAddSelfGet(courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [studentId] 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionDelGet(studentId?: string, courseId?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCourseSelectionDelGet(studentId, courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [courseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionDelSelfGet(courseId?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCourseSelectionDelSelfGet(courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} [isAll] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionGetAllGet(isAll?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<Array<CourseSelectionResDto>> {
            return localVarFp.apiCourseSelectionGetAllGet(isAll, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [studentId] 
         * @param {number} [courseId] 
         * @param {number} [performanceLevel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCourseSelectionPerformancePut(studentId?: string, courseId?: number, performanceLevel?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCourseSelectionPerformancePut(studentId, courseId, performanceLevel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CourseSelectionApi - object-oriented interface
 * @export
 * @class CourseSelectionApi
 * @extends {BaseAPI}
 */
export class CourseSelectionApi extends BaseAPI {
    /**
     * 
     * @param {string} [studentId] 
     * @param {number} [courseId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseSelectionApi
     */
    public apiCourseSelectionAddGet(studentId?: string, courseId?: number, options?: RawAxiosRequestConfig) {
        return CourseSelectionApiFp(this.configuration).apiCourseSelectionAddGet(studentId, courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [courseId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseSelectionApi
     */
    public apiCourseSelectionAddSelfGet(courseId?: number, options?: RawAxiosRequestConfig) {
        return CourseSelectionApiFp(this.configuration).apiCourseSelectionAddSelfGet(courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [studentId] 
     * @param {number} [courseId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseSelectionApi
     */
    public apiCourseSelectionDelGet(studentId?: string, courseId?: number, options?: RawAxiosRequestConfig) {
        return CourseSelectionApiFp(this.configuration).apiCourseSelectionDelGet(studentId, courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [courseId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseSelectionApi
     */
    public apiCourseSelectionDelSelfGet(courseId?: number, options?: RawAxiosRequestConfig) {
        return CourseSelectionApiFp(this.configuration).apiCourseSelectionDelSelfGet(courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} [isAll] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseSelectionApi
     */
    public apiCourseSelectionGetAllGet(isAll?: boolean, options?: RawAxiosRequestConfig) {
        return CourseSelectionApiFp(this.configuration).apiCourseSelectionGetAllGet(isAll, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [studentId] 
     * @param {number} [courseId] 
     * @param {number} [performanceLevel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseSelectionApi
     */
    public apiCourseSelectionPerformancePut(studentId?: string, courseId?: number, performanceLevel?: number, options?: RawAxiosRequestConfig) {
        return CourseSelectionApiFp(this.configuration).apiCourseSelectionPerformancePut(studentId, courseId, performanceLevel, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StudentApi - axios parameter creator
 * @export
 */
export const StudentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStudentIdGet', 'id', id)
            const localVarPath = `/api/student/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUserStudentReqDto} [createUserStudentReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentPost: async (createUserStudentReqDto?: CreateUserStudentReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/student`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserStudentReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {UpdateProfileStudentReqDto} [updateProfileStudentReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentProfilePut: async (id?: string, updateProfileStudentReqDto?: UpdateProfileStudentReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/student/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileStudentReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentProfileSlefGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/student/profile-slef`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateProfileStudentReqDto} [updateProfileStudentReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentProfileSlefPut: async (updateProfileStudentReqDto?: UpdateProfileStudentReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/student/profile-slef`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileStudentReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentApi - functional programming interface
 * @export
 */
export const StudentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStudentIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStudentResDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStudentIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentApi.apiStudentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateUserStudentReqDto} [createUserStudentReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStudentPost(createUserStudentReqDto?: CreateUserStudentReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStudentPost(createUserStudentReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentApi.apiStudentPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {UpdateProfileStudentReqDto} [updateProfileStudentReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStudentProfilePut(id?: string, updateProfileStudentReqDto?: UpdateProfileStudentReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStudentProfilePut(id, updateProfileStudentReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentApi.apiStudentProfilePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStudentProfileSlefGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStudentResDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStudentProfileSlefGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentApi.apiStudentProfileSlefGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateProfileStudentReqDto} [updateProfileStudentReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStudentProfileSlefPut(updateProfileStudentReqDto?: UpdateProfileStudentReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStudentProfileSlefPut(updateProfileStudentReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentApi.apiStudentProfileSlefPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StudentApi - factory interface
 * @export
 */
export const StudentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudentApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GetStudentResDto> {
            return localVarFp.apiStudentIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateUserStudentReqDto} [createUserStudentReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentPost(createUserStudentReqDto?: CreateUserStudentReqDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStudentPost(createUserStudentReqDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {UpdateProfileStudentReqDto} [updateProfileStudentReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentProfilePut(id?: string, updateProfileStudentReqDto?: UpdateProfileStudentReqDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStudentProfilePut(id, updateProfileStudentReqDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentProfileSlefGet(options?: RawAxiosRequestConfig): AxiosPromise<GetStudentResDto> {
            return localVarFp.apiStudentProfileSlefGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateProfileStudentReqDto} [updateProfileStudentReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentProfileSlefPut(updateProfileStudentReqDto?: UpdateProfileStudentReqDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiStudentProfileSlefPut(updateProfileStudentReqDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudentApi - object-oriented interface
 * @export
 * @class StudentApi
 * @extends {BaseAPI}
 */
export class StudentApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public apiStudentIdGet(id: string, options?: RawAxiosRequestConfig) {
        return StudentApiFp(this.configuration).apiStudentIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateUserStudentReqDto} [createUserStudentReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public apiStudentPost(createUserStudentReqDto?: CreateUserStudentReqDto, options?: RawAxiosRequestConfig) {
        return StudentApiFp(this.configuration).apiStudentPost(createUserStudentReqDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {UpdateProfileStudentReqDto} [updateProfileStudentReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public apiStudentProfilePut(id?: string, updateProfileStudentReqDto?: UpdateProfileStudentReqDto, options?: RawAxiosRequestConfig) {
        return StudentApiFp(this.configuration).apiStudentProfilePut(id, updateProfileStudentReqDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public apiStudentProfileSlefGet(options?: RawAxiosRequestConfig) {
        return StudentApiFp(this.configuration).apiStudentProfileSlefGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateProfileStudentReqDto} [updateProfileStudentReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public apiStudentProfileSlefPut(updateProfileStudentReqDto?: UpdateProfileStudentReqDto, options?: RawAxiosRequestConfig) {
        return StudentApiFp(this.configuration).apiStudentProfileSlefPut(updateProfileStudentReqDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TeacherApi - axios parameter creator
 * @export
 */
export const TeacherApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTeacherIdGet', 'id', id)
            const localVarPath = `/api/teacher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUserTeacherReqDto} [createUserTeacherReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherPost: async (createUserTeacherReqDto?: CreateUserTeacherReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/teacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserTeacherReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {UpdateProfileTeacherReqDto} [updateProfileTeacherReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherProfilePut: async (id?: string, updateProfileTeacherReqDto?: UpdateProfileTeacherReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/teacher/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileTeacherReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherProfileSlefGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/teacher/profile-slef`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateProfileTeacherReqDto} [updateProfileTeacherReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherProfileSlefPut: async (updateProfileTeacherReqDto?: UpdateProfileTeacherReqDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/teacher/profile-slef`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileTeacherReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeacherApi - functional programming interface
 * @export
 */
export const TeacherApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeacherApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeacherIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTeacherResDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeacherIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeacherApi.apiTeacherIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateUserTeacherReqDto} [createUserTeacherReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeacherPost(createUserTeacherReqDto?: CreateUserTeacherReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeacherPost(createUserTeacherReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeacherApi.apiTeacherPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {UpdateProfileTeacherReqDto} [updateProfileTeacherReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeacherProfilePut(id?: string, updateProfileTeacherReqDto?: UpdateProfileTeacherReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeacherProfilePut(id, updateProfileTeacherReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeacherApi.apiTeacherProfilePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeacherProfileSlefGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTeacherResDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeacherProfileSlefGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeacherApi.apiTeacherProfileSlefGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateProfileTeacherReqDto} [updateProfileTeacherReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeacherProfileSlefPut(updateProfileTeacherReqDto?: UpdateProfileTeacherReqDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeacherProfileSlefPut(updateProfileTeacherReqDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeacherApi.apiTeacherProfileSlefPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TeacherApi - factory interface
 * @export
 */
export const TeacherApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeacherApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GetTeacherResDto> {
            return localVarFp.apiTeacherIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateUserTeacherReqDto} [createUserTeacherReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherPost(createUserTeacherReqDto?: CreateUserTeacherReqDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTeacherPost(createUserTeacherReqDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {UpdateProfileTeacherReqDto} [updateProfileTeacherReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherProfilePut(id?: string, updateProfileTeacherReqDto?: UpdateProfileTeacherReqDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTeacherProfilePut(id, updateProfileTeacherReqDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherProfileSlefGet(options?: RawAxiosRequestConfig): AxiosPromise<GetTeacherResDto> {
            return localVarFp.apiTeacherProfileSlefGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateProfileTeacherReqDto} [updateProfileTeacherReqDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherProfileSlefPut(updateProfileTeacherReqDto?: UpdateProfileTeacherReqDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTeacherProfileSlefPut(updateProfileTeacherReqDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeacherApi - object-oriented interface
 * @export
 * @class TeacherApi
 * @extends {BaseAPI}
 */
export class TeacherApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public apiTeacherIdGet(id: string, options?: RawAxiosRequestConfig) {
        return TeacherApiFp(this.configuration).apiTeacherIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateUserTeacherReqDto} [createUserTeacherReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public apiTeacherPost(createUserTeacherReqDto?: CreateUserTeacherReqDto, options?: RawAxiosRequestConfig) {
        return TeacherApiFp(this.configuration).apiTeacherPost(createUserTeacherReqDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {UpdateProfileTeacherReqDto} [updateProfileTeacherReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public apiTeacherProfilePut(id?: string, updateProfileTeacherReqDto?: UpdateProfileTeacherReqDto, options?: RawAxiosRequestConfig) {
        return TeacherApiFp(this.configuration).apiTeacherProfilePut(id, updateProfileTeacherReqDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public apiTeacherProfileSlefGet(options?: RawAxiosRequestConfig) {
        return TeacherApiFp(this.configuration).apiTeacherProfileSlefGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateProfileTeacherReqDto} [updateProfileTeacherReqDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public apiTeacherProfileSlefPut(updateProfileTeacherReqDto?: UpdateProfileTeacherReqDto, options?: RawAxiosRequestConfig) {
        return TeacherApiFp(this.configuration).apiTeacherProfileSlefPut(updateProfileTeacherReqDto, options).then((request) => request(this.axios, this.basePath));
    }
}



